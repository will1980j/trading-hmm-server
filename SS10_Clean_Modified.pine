//@version=5
indicator("SS10 Clean", overlay=true, max_boxes_count=500)

// === INPUTS ===
enable_bearish_fvg = input.bool(true, "Enable Bearish FVG Signals")
enable_bullish_fvg = input.bool(true, "Enable Bullish FVG Signals")
enable_bearish_ifvg = input.bool(true, "Enable Bearish IFVG Signals")
bearish_fvg_color = input.color(color.red, "Bearish FVG Color")
bullish_fvg_color = input.color(color.green, "Bullish FVG Color")
bearish_ifvg_color = input.color(color.orange, "Bearish IFVG Color")
bearish_fvg_opacity = input.int(70, "Bearish FVG Opacity", minval=0, maxval=100)
bullish_fvg_opacity = input.int(70, "Bullish FVG Opacity", minval=0, maxval=100)
bearish_ifvg_opacity = input.int(70, "Bearish IFVG Opacity", minval=0, maxval=100)
show_bearish_fvg_labels = input.bool(true, "Show Bearish FVG Labels")
show_bullish_fvg_labels = input.bool(true, "Show Bullish FVG Labels")
show_bearish_ifvg_labels = input.bool(true, "Show Bearish IFVG Labels")
bearish_border_color = input.color(color.red, "Bearish FVG Border Color")
bullish_border_color = input.color(color.green, "Bullish FVG Border Color")
bearish_ifvg_border_color = input.color(color.orange, "Bearish IFVG Border Color")
bearish_border_width = input.int(2, "Bearish FVG Border Width", minval=1, maxval=5)
bullish_border_width = input.int(2, "Bullish FVG Border Width", minval=1, maxval=5)
bearish_ifvg_border_width = input.int(2, "Bearish IFVG Border Width", minval=1, maxval=5)
high_pivot_color = input.color(color.red, "High Pivot Color")
low_pivot_color = input.color(color.green, "Low Pivot Color")
pivot_line_width = input.int(1, "Pivot Line Width", minval=1, maxval=5)
pivot_line_style = input.string("Solid", "Pivot Line Style", ["Solid", "Dashed", "Dotted"])
htf_bias_timeframe = input.timeframe("60", "HTF Bias Timeframe")
show_terminated_zones = input.bool(true, "Show Terminated Zones")
show_only_fresh_zones = input.bool(false, "Show Only Fresh Zones")
touched_zone_color = input.color(color.yellow, "Touched Zone Color")

// === HTF BIAS CALCULATION ===
var string bias = "Neutral"
var bull_fvg_highs = array.new<float>()
var bull_fvg_lows = array.new<float>()
var bear_fvg_highs = array.new<float>()
var bear_fvg_lows = array.new<float>()
var bull_ifvg_highs = array.new<float>()
var bull_ifvg_lows = array.new<float>()
var bear_ifvg_highs = array.new<float>()
var bear_ifvg_lows = array.new<float>()
var float allTimeHigh = na
var float allTimeLow = na
var bool waitingForFirstBullishFVG = false
var float firstBullishFVGTop = 0.0
var float firstBullishFVGBottom = 0.0
var float firstBullishFVGMiddleHigh = 0.0
var bool firstBullishFVGFound = false
var int firstBullishFVGBar = 0

if barstate.isconfirmed
    // Update ATH/ATL
    if na(allTimeHigh) or high > allTimeHigh
        allTimeHigh := high
    if na(allTimeLow) or low < allTimeLow
        allTimeLow := low
    
    // ATH/ATL bias override
    if close > allTimeHigh[1]
        bias := "Bullish"
        // Reset bearish IFVG tracking
        waitingForFirstBullishFVG := false
        firstBullishFVGFound := false
    else if close < allTimeLow[1]
        bias := "Bearish"
    else
        // Regular FVG bias logic
        c2_high = high[2]
        c2_low = low[2]
        c0_high = high
        c0_low = low
        
        bullish_fvg = c2_high < c0_low
        bearish_fvg = c2_low > c0_high
        
        if bullish_fvg
            array.push(bull_fvg_highs, c0_low)
            array.push(bull_fvg_lows, c2_high)
            
        if bearish_fvg
            array.push(bear_fvg_highs, c2_low)
            array.push(bear_fvg_lows, c0_high)
        
        if array.size(bull_fvg_highs) > 0
            for i = array.size(bull_fvg_highs) - 1 to 0
                if close < array.get(bull_fvg_lows, i)
                    array.push(bear_ifvg_highs, array.get(bull_fvg_highs, i))
                    array.push(bear_ifvg_lows, array.get(bull_fvg_lows, i))
                    array.remove(bull_fvg_highs, i)
                    array.remove(bull_fvg_lows, i)
                    bias := "Bearish"
                    
        if array.size(bear_fvg_highs) > 0
            for i = array.size(bear_fvg_highs) - 1 to 0
                if close > array.get(bear_fvg_highs, i)
                    array.push(bull_ifvg_highs, array.get(bear_fvg_highs, i))
                    array.push(bull_ifvg_lows, array.get(bear_fvg_lows, i))
                    array.remove(bear_fvg_highs, i)
                    array.remove(bear_fvg_lows, i)
                    bias := "Bullish"
                    // Reset bearish IFVG tracking
                    waitingForFirstBullishFVG := false
                    firstBullishFVGFound := false
                    
        if array.size(bear_ifvg_highs) > 0
            for i = array.size(bear_ifvg_highs) - 1 to 0
                if close > array.get(bear_ifvg_highs, i)
                    array.remove(bear_ifvg_highs, i)
                    array.remove(bear_ifvg_lows, i)
                    bias := "Bullish"
                    // Reset bearish IFVG tracking
                    waitingForFirstBullishFVG := false
                    firstBullishFVGFound := false
                    
        if array.size(bull_ifvg_highs) > 0
            for i = array.size(bull_ifvg_highs) - 1 to 0
                if close < array.get(bull_ifvg_lows, i)
                    array.remove(bull_ifvg_highs, i)
                    array.remove(bull_ifvg_lows, i)
                    bias := "Bearish"

h1_bias = request.security(syminfo.tickerid, htf_bias_timeframe, bias)

// === FVG VARIABLES ===
var int bearishFVGCount = 0
var int bullishFVGCount = 0
var int bearishIFVGCount = 0
var int lastBearishSweepBar = -1
var int lastBullishSweepBar = -1
var array<box> activeFVGBoxes = array.new<box>()
var array<float> fvgEntryPrices = array.new<float>()
var array<float> fvgStopLosses = array.new<float>()
var array<bool> fvgIsBearish = array.new<bool>()
var array<int> fvgStartBars = array.new<int>()
var array<string> fvgOriginalText = array.new<string>()
var array<float> fvgMaxFavorable = array.new<float>()
var bool sweepDetected = false
var float sweptPivotLevel = 0.0

// === PIVOT DETECTION (from SSV7) ===
var array<line> highLines = array.new<line>()
var array<float> highPivots = array.new<float>()
var array<int> highPivotTimes = array.new<int>()
var array<line> lowLines = array.new<line>()
var array<float> lowPivots = array.new<float>()
var array<int> lowPivotTimes = array.new<int>()

// Simple 3-bar pivot detection
isHighPivot = high[1] > high and high[1] > high[2]
isLowPivot = low[1] < low and low[1] < low[2]

// Convert line style
lineStyle = pivot_line_style == "Dashed" ? line.style_dashed : pivot_line_style == "Dotted" ? line.style_dotted : line.style_solid

if barstate.isconfirmed
    // Check for high pivot breaks
    if array.size(highLines) > 0
        for i = array.size(highLines) - 1 to 0
            float pivotLevel = array.get(highPivots, i)
            if high > pivotLevel
                line currentLine = array.get(highLines, i)
                line.set_x2(currentLine, bar_index)
                
                // This is a sweep for bearish bias
                if h1_bias == "Bearish"
                    lastBearishSweepBar := bar_index
                    bearishFVGCount := 0
                    // Only reset IFVG process if no FVG is currently being tracked
                    if not firstBullishFVGFound
                        bearishIFVGCount := 0
                        waitingForFirstBullishFVG := true
                    sweepDetected := true
                    sweptPivotLevel := pivotLevel
                
                array.remove(highLines, i)
                array.remove(highPivots, i)
                array.remove(highPivotTimes, i)
            else
                line currentLine = array.get(highLines, i)
                line.set_x2(currentLine, bar_index + 500)
    
    // Check for low pivot breaks
    if array.size(lowLines) > 0
        for i = array.size(lowLines) - 1 to 0
            float pivotLevel = array.get(lowPivots, i)
            if low < pivotLevel
                line currentLine = array.get(lowLines, i)
                line.set_x2(currentLine, bar_index)
                
                // This is a sweep for bullish bias
                if h1_bias == "Bullish"
                    lastBullishSweepBar := bar_index
                    bullishFVGCount := 0
                    sweepDetected := true
                    sweptPivotLevel := pivotLevel
                
                array.remove(lowLines, i)
                array.remove(lowPivots, i)
                array.remove(lowPivotTimes, i)
            else
                line currentLine = array.get(lowLines, i)
                line.set_x2(currentLine, bar_index + 500)
    
    // Create new high pivot lines (only during bearish bias)
    if isHighPivot and h1_bias == "Bearish"
        line newLine = line.new(bar_index - 1, high[1], bar_index + 500, high[1], color=high_pivot_color, width=pivot_line_width, style=lineStyle)
        array.push(highLines, newLine)
        array.push(highPivots, high[1])
        array.push(highPivotTimes, bar_index - 1)
        
        // Keep only most recent 50 pivots
        if array.size(highLines) > 50
            line.delete(array.shift(highLines))
            array.shift(highPivots)
            array.shift(highPivotTimes)
    
    // Create new low pivot lines (only during bullish bias)
    if isLowPivot and h1_bias == "Bullish"
        line newLine = line.new(bar_index - 1, low[1], bar_index + 500, low[1], color=low_pivot_color, width=pivot_line_width, style=lineStyle)
        array.push(lowLines, newLine)
        array.push(lowPivots, low[1])
        array.push(lowPivotTimes, bar_index - 1)
        
        // Keep only most recent 50 pivots
        if array.size(lowLines) > 50
            line.delete(array.shift(lowLines))
            array.shift(lowPivots)
            array.shift(lowPivotTimes)

// === FVG DETECTION ===

// Initialize sweep variables
if not barstate.isconfirmed
    sweepDetected := false
    sweptPivotLevel := 0.0

// Detect FVGs and IFVGs
isBearishFVG = high < low[2] and not na(low[2])
isBullishFVG = low > high[2] and not na(high[2])
bearishFvgDetected = isBearishFVG
bullishFvgDetected = isBullishFVG

// Sequential bearish IFVG process
var array<float> ifvgTerminationLevels = array.new<float>()
bearishIfvgDetected = false
var float ifvgTop = 0.0
var float ifvgBottom = 0.0
var float ifvgTerminationLevel = 0.0
var int ifvgStartBar = 0

// Sequential IFVG logic
if barstate.isconfirmed and h1_bias == "Bearish"
    // Capture bullish FVGs after red pivot sweep (keep updating until one gets invalidated)
    if isBullishFVG and (waitingForFirstBullishFVG or not firstBullishFVGFound)
        firstBullishFVGTop := low
        firstBullishFVGBottom := high[2]
        firstBullishFVGMiddleHigh := high[1]
        firstBullishFVGFound := true
        firstBullishFVGBar := bar_index - 2
        waitingForFirstBullishFVG := false

// Check if first FVG gets invalidated (check every bar)
if h1_bias == "Bearish" and firstBullishFVGFound and close < firstBullishFVGBottom
    bearishIfvgDetected := true
    ifvgTop := firstBullishFVGTop
    ifvgBottom := firstBullishFVGBottom
    ifvgTerminationLevel := firstBullishFVGMiddleHigh
    ifvgStartBar := firstBullishFVGBar  // Use stored FVG bar location
    // Reset process after IFVG creation
    firstBullishFVGFound := false
    waitingForFirstBullishFVG := true



// Entry signals when price first touches FVG boxes
bearishSignalGenerated = false
bullishSignalGenerated = false

// Update MFE for active trades (continuous tracking like reference code)
if array.size(activeFVGBoxes) > 0
    for i = 0 to array.size(activeFVGBoxes) - 1
        startBar = array.get(fvgStartBars, i)
        if startBar != -1  // Only for active trades
            isBearish = array.get(fvgIsBearish, i)
            entryPrice = array.get(fvgEntryPrices, i)
            currentMFE = array.get(fvgMaxFavorable, i)
            
            // Calculate current favorable move in R multiples
            stopLoss = array.get(fvgStopLosses, i)
            riskAmount = math.abs(entryPrice - stopLoss)
            favorableMove = isBearish ? entryPrice - low : high - entryPrice
            favorableMove := math.max(favorableMove, 0)
            favorableMoveInR = riskAmount > 0 ? favorableMove / riskAmount : 0
            
            // Update MFE if current move is better
            if favorableMoveInR > currentMFE
                array.set(fvgMaxFavorable, i, favorableMoveInR)

// Check for FVG box touches and termination
if array.size(activeFVGBoxes) > 0
    for i = array.size(activeFVGBoxes) - 1 to 0
        fvgBox = array.get(activeFVGBoxes, i)
        boxTop = box.get_top(fvgBox)
        boxBottom = box.get_bottom(fvgBox)
        startBar = array.get(fvgStartBars, i)
        isBearish = array.get(fvgIsBearish, i)
        originalText = array.get(fvgOriginalText, i)
        isIFVG = str.contains(originalText, "IFVG")
        
        // First touch detection (skip for IFVG)
        if startBar == -1 and not isIFVG and (low <= boxTop and high >= boxBottom)
            if show_only_fresh_zones
                box.delete(fvgBox)
            else
                array.set(fvgStartBars, i, bar_index)
                array.set(fvgEntryPrices, i, isBearish ? boxBottom : boxTop)
                box.set_bgcolor(fvgBox, color.new(touched_zone_color, 70))
                if isBearish
                    bearishSignalGenerated := true
                else
                    bullishSignalGenerated := true
        
        // Termination: price pierces through opposite side of box after entry (or always for IFVG)
        if startBar != -1 or isIFVG
            terminate = false
            
            if isBearish and not isIFVG and high > boxTop  // Regular bearish FVG
                terminate := true
            else if isBearish and isIFVG and high > boxTop  // Bearish IFVG: terminate when price wicks above box top
                terminate := true
            else if not isBearish and low < boxBottom  // Bullish: terminate when low wicks below box bottom
                terminate := true
            
            if terminate
                finalMFE = array.get(fvgMaxFavorable, i)
                displayMFE = finalMFE > 0 ? finalMFE : -1
                
                if show_terminated_zones
                    box.set_text(fvgBox, "MFE: " + str.tostring(displayMFE, "#.##") + "R")
                    box.set_right(fvgBox, bar_index)
                    box.set_extend(fvgBox, extend.none)
                    box.set_bgcolor(fvgBox, color.new(color.gray, 80))
                else
                    box.delete(fvgBox)
                
                array.remove(activeFVGBoxes, i)
                array.remove(fvgEntryPrices, i)
                array.remove(fvgStopLosses, i)
                array.remove(fvgIsBearish, i)
                array.remove(fvgStartBars, i)
                array.remove(fvgOriginalText, i)
                array.remove(fvgMaxFavorable, i)
                if isIFVG
                    array.remove(ifvgTerminationLevels, i)

// Create FVG boxes when detected
if enable_bearish_fvg and bearishFvgDetected and h1_bias == "Bearish" and lastBearishSweepBar >= 0 and bar_index > lastBearishSweepBar and bearishFVGCount < 2
    bearishFVGCount += 1
    
    // Create bearish FVG box
    entryPrice = high
    stopLoss = high[2]
    fvgBox = box.new(bar_index-2, math.max(high[1], high[2]), bar_index, high, 
                     bgcolor=color.new(bearish_fvg_color, bearish_fvg_opacity), 
                     border_color=bearish_border_color, 
                     border_width=bearish_border_width, 
                     extend=extend.right,
                     text=show_bearish_fvg_labels ? "FVG #" + str.tostring(bearishFVGCount) + "\nEntry: " + str.tostring(entryPrice, "#.##") + "\nSL: " + str.tostring(stopLoss, "#.##") : "",
                     text_color=color.white)
    array.push(activeFVGBoxes, fvgBox)
    array.push(fvgEntryPrices, entryPrice)
    array.push(fvgStopLosses, stopLoss)
    array.push(fvgIsBearish, true)
    array.push(fvgStartBars, -1)
    array.push(fvgOriginalText, show_bearish_fvg_labels ? "FVG #" + str.tostring(bearishFVGCount) : "")
    array.push(fvgMaxFavorable, 0.0)
    array.push(ifvgTerminationLevels, 0.0)  // Placeholder for regular FVGs

if enable_bullish_fvg and bullishFvgDetected and h1_bias == "Bullish" and lastBullishSweepBar >= 0 and bar_index > lastBullishSweepBar and bullishFVGCount < 2
    bullishFVGCount += 1
    
    // Create bullish FVG box
    entryPrice = low
    stopLoss = low[2]
    fvgBox = box.new(bar_index-2, low, bar_index, math.min(low[1], low[2]), 
                     bgcolor=color.new(bullish_fvg_color, bullish_fvg_opacity), 
                     border_color=bullish_border_color, 
                     border_width=bullish_border_width, 
                     extend=extend.right,
                     text=show_bullish_fvg_labels ? "FVG #" + str.tostring(bullishFVGCount) + "\nEntry: " + str.tostring(entryPrice, "#.##") + "\nSL: " + str.tostring(stopLoss, "#.##") : "",
                     text_color=color.white)
    array.push(activeFVGBoxes, fvgBox)
    array.push(fvgEntryPrices, entryPrice)
    array.push(fvgStopLosses, stopLoss)
    array.push(fvgIsBearish, false)
    array.push(fvgStartBars, -1)
    array.push(fvgOriginalText, show_bullish_fvg_labels ? "FVG #" + str.tostring(bullishFVGCount) : "")
    array.push(fvgMaxFavorable, 0.0)
    array.push(ifvgTerminationLevels, 0.0)  // Placeholder for regular FVGs

// Create Bearish IFVG boxes
if enable_bearish_ifvg and bearishIfvgDetected and lastBearishSweepBar >= 0 and bar_index > lastBearishSweepBar
    
    entryPrice = ifvgTop
    stopLoss = ifvgBottom
    
    fvgBox = box.new(ifvgStartBar, ifvgBottom, bar_index, ifvgTerminationLevel, 
                     bgcolor=color.new(bearish_ifvg_color, bearish_ifvg_opacity), 
                     border_color=bearish_ifvg_border_color, 
                     border_width=bearish_ifvg_border_width, 
                     extend=extend.right,
                     text=show_bearish_ifvg_labels ? "IFVG #" + str.tostring(bearishIFVGCount) : "",
                     text_color=color.white)
    
    array.push(activeFVGBoxes, fvgBox)
    array.push(fvgEntryPrices, entryPrice)
    array.push(fvgStopLosses, stopLoss)
    array.push(fvgIsBearish, true)
    array.push(fvgStartBars, -1)
    array.push(fvgOriginalText, show_bearish_ifvg_labels ? "IFVG #" + str.tostring(bearishIFVGCount) : "")
    array.push(fvgMaxFavorable, 0.0)
    array.push(ifvgTerminationLevels, ifvgTerminationLevel)  // Store middle candle high