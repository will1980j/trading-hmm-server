//@version=5
indicator("NASDAQ Real-Time Price Streamer - Fixed", overlay=false)

// ============================================================================
// REAL-TIME PRICE STREAMING INDICATOR (FIXED VERSION)
// ============================================================================
// This indicator runs on 1-second timeframe and streams NASDAQ price data
// Fixed Pine Script syntax issues
// ============================================================================

// Configuration
webhook_url = input.string("https://web-production-cd33.up.railway.app/api/realtime-price", "Price Webhook URL")
enable_streaming = input.bool(true, "Enable Real-Time Price Streaming")
price_threshold = input.float(0.25, "Minimum Price Change (points)")
enable_session_filter = input.bool(true, "Only Stream During Active Sessions")

// Track previous price
var float previous_price = na

// ============================================================================
// SESSION DETECTION
// ============================================================================

get_current_session() =>
    current_hour = hour(time, "America/New_York")
    current_minute = minute(time, "America/New_York")
    
    session_name = ""
    
    if current_hour >= 20 and current_hour <= 23
        session_name := "ASIA"
    else if current_hour >= 0 and current_hour <= 5
        session_name := "LONDON"
    else if current_hour >= 6 and (current_hour < 8 or (current_hour == 8 and current_minute <= 29))
        session_name := "NY PRE"
    else if (current_hour == 8 and current_minute >= 30) or (current_hour >= 9 and current_hour <= 11)
        session_name := "NY AM"
    else if current_hour == 12
        session_name := "NY LUNCH"
    else if current_hour >= 13 and current_hour <= 15
        session_name := "NY PM"
    else
        session_name := "INVALID"
    
    session_name

// ============================================================================
// PRICE CHANGE DETECTION
// ============================================================================

price_changed_significantly() =>
    if na(previous_price)
        true  // First price update
    else
        math.abs(close - previous_price) >= price_threshold

// ============================================================================
// PRICE PAYLOAD CREATION
// ============================================================================

create_price_payload() =>
    current_session = get_current_session()
    price_change = na(previous_price) ? 0 : close - previous_price
    
    // Create price payload
    price_json = '{"type":"realtime_price",' +
                '"symbol":"NQ",' +
                '"price":' + str.tostring(close) + ',' +
                '"timestamp":' + str.tostring(time) + ',' +
                '"session":"' + current_session + '",' +
                '"volume":' + str.tostring(volume) + ',' +
                '"change":' + str.tostring(price_change) + '}'
    
    price_json

// ============================================================================
// STREAMING LOGIC
// ============================================================================

should_stream_price() =>
    if not enable_streaming
        false
    else if enable_session_filter and get_current_session() == "INVALID"
        false
    else if not price_changed_significantly()
        false
    else
        true

// Stream price update
if should_stream_price() and barstate.isconfirmed
    price_payload = create_price_payload()
    alert(price_payload, alert.freq_once_per_bar)
    
    // Update tracking variables
    previous_price := close

// ============================================================================
// VISUAL ELEMENTS
// ============================================================================

// Plot real-time price
plot(close, title="Real-Time Price", color=color.blue, linewidth=2)

// Plot price change
price_change = na(previous_price) ? 0 : close - previous_price
plot(price_change, title="Price Change", color=price_change > 0 ? color.green : color.red)

// ============================================================================
// STATUS DASHBOARD
// ============================================================================

if barstate.islast
    var table status_table = table.new(position.top_right, 2, 5, bgcolor=color.white, border_width=1)
    
    current_session = get_current_session()
    session_color = current_session == "INVALID" ? color.red : color.green
    
    table.cell(status_table, 0, 0, "Session", text_color=color.black, bgcolor=color.yellow)
    table.cell(status_table, 1, 0, current_session, text_color=color.white, bgcolor=session_color)
    
    table.cell(status_table, 0, 1, "Price", text_color=color.black)
    table.cell(status_table, 1, 1, "$" + str.tostring(close), text_color=color.black)
    
    change_color = price_change > 0 ? color.green : color.red
    table.cell(status_table, 0, 2, "Change", text_color=color.black)
    table.cell(status_table, 1, 2, str.tostring(price_change), text_color=color.white, bgcolor=change_color)
    
    streaming_status = enable_streaming ? "ON" : "OFF"
    streaming_color = enable_streaming ? color.green : color.red
    table.cell(status_table, 0, 3, "Streaming", text_color=color.black)
    table.cell(status_table, 1, 3, streaming_status, text_color=color.white, bgcolor=streaming_color)
    
    table.cell(status_table, 0, 4, "Volume", text_color=color.black)
    table.cell(status_table, 1, 4, str.tostring(volume), text_color=color.black)

// ============================================================================
// SETUP INSTRUCTIONS
// ============================================================================
// 1. Add this indicator to NASDAQ 1-SECOND chart (important!)
// 2. Create alert on this indicator
// 3. Set webhook URL to: https://web-production-cd33.up.railway.app/api/realtime-price
// 4. Set alert message to: {{strategy.order.alert_text}}
// 5. Enable "Webhook URL" in alert settings
// 6. Set alert to trigger "Once Per Bar Close" on "1s" timeframe
// ============================================================================