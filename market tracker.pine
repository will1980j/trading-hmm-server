//@version=6
indicator("Multi-TF Market State Tracker", overlay=true)

// Base theme colors and constants
var color BG_COLOR = color.rgb(28, 28, 53, 90)  // Almost invisible background
var color HEADER_BG = color.rgb(35, 35, 65, 80)  // Subtle header
var color TEXT_COLOR = color.rgb(255, 255, 255)  // Bright white text
var color HEADER_TEXT = color.rgb(255, 255, 255)
var color bullishBgColor = color.rgb(0, 255, 0, 70)  // More transparent green
var color bearishBgColor = color.rgb(255, 0, 0, 70)  // More transparent red
var int tableBgTransparency = 90  // Very transparent
var int headerBgTransparency = 80  // Very transparent headers
var int cellBgTransparency = 85  // Very transparent cells

// Table style inputs
tableTextSize = input.string("Normal", "Table Text Size", options=["Tiny", "Small", "Normal", "Large", "Huge"], group="Table Style")
var float tableSize = input.float(1.0, "Table Size Multiplier", minval=0.5, maxval=2.0, step=0.1, group="Table Style")
var float tablePadding = input.float(1.0, "Cell Padding", minval=0.5, maxval=2.0, step=0.1, group="Table Style")

// Constants
var TF_MONTHLY = "M"
var TF_WEEKLY = "W"
var TF_DAILY = "D"
var TF_4H = "240"
var TF_1H = "60"
var TF_15 = "15"
var TF_5 = "5"
// State definitions
var STATE_BULL_ERL_TO_IRL = "BULLISH ERL ▼ IRL"
var STATE_BULL_IRL_TO_ERL = "BULLISH IRL ▲ ERL"
var STATE_BEAR_ERL_TO_IRL = "BEARISH ERL ▲ IRL"
var STATE_BEAR_IRL_TO_ERL = "BEARISH IRL ▼ ERL"

// State inputs
stateMonthly = input.string(title="Monthly State", defval=STATE_BULL_ERL_TO_IRL, options=[STATE_BULL_ERL_TO_IRL, STATE_BULL_IRL_TO_ERL, STATE_BEAR_ERL_TO_IRL, STATE_BEAR_IRL_TO_ERL])
stateWeekly = input.string(title="Weekly State", defval=STATE_BULL_ERL_TO_IRL, options=[STATE_BULL_ERL_TO_IRL, STATE_BULL_IRL_TO_ERL, STATE_BEAR_ERL_TO_IRL, STATE_BEAR_IRL_TO_ERL])
stateDaily = input.string(title="Daily State", defval=STATE_BULL_ERL_TO_IRL, options=[STATE_BULL_ERL_TO_IRL, STATE_BULL_IRL_TO_ERL, STATE_BEAR_ERL_TO_IRL, STATE_BEAR_IRL_TO_ERL])
state4H = input.string(title="4H State", defval=STATE_BULL_ERL_TO_IRL, options=[STATE_BULL_ERL_TO_IRL, STATE_BULL_IRL_TO_ERL, STATE_BEAR_ERL_TO_IRL, STATE_BEAR_IRL_TO_ERL])
state1H = input.string(title="1H State", defval=STATE_BULL_ERL_TO_IRL, options=[STATE_BULL_ERL_TO_IRL, STATE_BULL_IRL_TO_ERL, STATE_BEAR_ERL_TO_IRL, STATE_BEAR_IRL_TO_ERL])
state15M = input.string(title="15M State", defval=STATE_BULL_ERL_TO_IRL, options=[STATE_BULL_ERL_TO_IRL, STATE_BULL_IRL_TO_ERL, STATE_BEAR_ERL_TO_IRL, STATE_BEAR_IRL_TO_ERL])
state5M = input.string(title="5M State", defval=STATE_BULL_ERL_TO_IRL, options=[STATE_BULL_ERL_TO_IRL, STATE_BULL_IRL_TO_ERL, STATE_BEAR_ERL_TO_IRL, STATE_BEAR_IRL_TO_ERL])

// Signal filter inputs
showStrongBullish = input.bool(true, "Show Strong Bullish Signals", inline="strong_signals", group="Signal Filters")
showStrongBearish = input.bool(true, "Show Strong Bearish Signals", inline="strong_signals", group="Signal Filters")
showStrongCounter = input.bool(true, "Show Strong Counter Signals", inline="strong_signals", group="Signal Filters")
showWeakBullish = input.bool(true, "Show Weak Bullish Signals", group="Signal Filters")
showWeakBearish = input.bool(true, "Show Weak Bearish Signals", group="Signal Filters")
showReversal = input.bool(true, "Show Reversal Signals", group="Signal Filters")

// Timeframe visibility settings
group_tf = "Timeframe Visibility"
tfVisibilityMode = input.string("All", "Timeframe Selection Mode", options=["All", "Custom", "Higher TFs Only", "Lower TFs Only"], group=group_tf)
showMonthlyTF = input.bool(true, "Show Monthly", group=group_tf, inline="monthly")
showWeeklyTF = input.bool(true, "Show Weekly", group=group_tf, inline="weekly")
showDailyTF = input.bool(true, "Show Daily", group=group_tf, inline="daily")
show4HTF = input.bool(true, "Show 4H", group=group_tf, inline="4h")
show1HTF = input.bool(true, "Show 1H", group=group_tf, inline="1h")
show15MTF = input.bool(true, "Show 15M", group=group_tf, inline="15m")
show5MTF = input.bool(true, "Show 5M", group=group_tf, inline="5m")

// Timeframe pair visibility settings
group_pairs = "Timeframe Pair Visibility"
showMW = input.bool(true, "Show Monthly-Weekly", group=group_pairs)
showWD = input.bool(true, "Show Weekly-Daily", group=group_pairs)
showD4H = input.bool(true, "Show Daily-4H", group=group_pairs)
show4H1H = input.bool(true, "Show 4H-1H", group=group_pairs)
show1H15M = input.bool(true, "Show 1H-15M", group=group_pairs)
show15M5M = input.bool(true, "Show 15M-5M", group=group_pairs)

// Probability and Harmony Settings
group_prob = "Probability & Harmony Settings"
showProbability = input.bool(true, "Show Signal Probability", group=group_prob)
showHarmony = input.bool(true, "Show Timeframe Harmony", group=group_prob)
harmonyThreshold = input.int(3, "Harmony Threshold", minval=2, maxval=7, group=group_prob, tooltip="Minimum number of aligned timeframes to show harmony")
lookbackPeriod = input.int(10, "Performance Lookback (bars)", minval=5, maxval=50, group=group_prob, tooltip="Number of bars to look back for signal performance")

// Arrays to track signal performance
var float[] strongBullishPerf = array.new_float(0)
var float[] strongBearishPerf = array.new_float(0)
var float[] strongCounterPerf = array.new_float(0)
var float[] weakBullishPerf = array.new_float(0)
var float[] weakBearishPerf = array.new_float(0)
var float[] reversalPerf = array.new_float(0)

// Variables to track last signals for performance measurement
var string lastMWSignal = ""
var string lastWDSignal = ""
var string lastD4HSignal = ""
var string lastH4H1Signal = ""
var string lastH1M15Signal = ""
var string lastM15M5Signal = ""

// Variables to track when signals were generated
var int lastMWSignalBar = 0
var int lastWDSignalBar = 0
var int lastD4HSignalBar = 0
var int lastH4H1SignalBar = 0
var int lastH1M15SignalBar = 0
var int lastM15M5SignalBar = 0
// FVG Settings
showMonthlyFVG = input.bool(false, "Show Monthly FVGs", group="FVG Settings")
showWeeklyFVG = input.bool(false, "Show Weekly FVGs", group="FVG Settings")
showDailyFVG = input.bool(false, "Show Daily FVGs", group="FVG Settings")
show4HFVG = input.bool(false, "Show 4H FVGs", group="FVG Settings")
show1HFVG = input.bool(false, "Show 1H FVGs", group="FVG Settings")
show15MFVG = input.bool(false, "Show 15M FVGs", group="FVG Settings")
show5MFVG = input.bool(true, "Show 5M FVGs", group="FVG Settings")
showChartTFFVG = input.bool(true, "Show Chart TF FVGs", group="FVG Settings")

// IFVG Settings
showMonthlyIFVG = input.bool(false, "Show Monthly IFVGs", group="IFVG Settings")
showWeeklyIFVG = input.bool(false, "Show Weekly IFVGs", group="IFVG Settings")
showDailyIFVG = input.bool(false, "Show Daily IFVGs", group="IFVG Settings")
show4HIFVG = input.bool(false, "Show 4H IFVGs", group="IFVG Settings")
show1HIFVG = input.bool(false, "Show 1H IFVGs", group="IFVG Settings")
show15MIFVG = input.bool(false, "Show 15M IFVGs", group="IFVG Settings")
show5MIFVG = input.bool(true, "Show 5M IFVGs", group="IFVG Settings")
showChartTFIFVG = input.bool(true, "Show Chart TF IFVGs", group="IFVG Settings")

// FVG Appearance
fvgHistoryLimit = input.int(10, "FVG History Limit", minval=1, maxval=100, group="FVG Appearance")
bullFVGColor = input.color(color.new(color.green, 90), "Bullish FVG Color", group="FVG Appearance")
bearFVGColor = input.color(color.new(color.red, 90), "Bearish FVG Color", group="FVG Appearance")
fvgBorderColor = input.color(color.new(color.white, 80), "FVG Border Color", group="FVG Appearance")
showFVGBorder = input.bool(true, "Show FVG Borders", group="FVG Appearance")
fvgExtension = input.int(50, "FVG Extension Bars", minval=10, maxval=500, group="FVG Appearance")
showCEMidpoint = input.bool(false, "Show CE Midpoints", group="FVG Appearance")
ceMidpointColor = input.color(color.new(color.yellow, 0), "CE Midpoint Color", group="FVG Appearance")
ceMidpointStyle = input.string("Dashed", "CE Midpoint Style", options=["Solid", "Dotted", "Dashed"], group="FVG Appearance")
fvgLabelSize = input.string("Tiny", "FVG Label Size", options=["Tiny", "Small", "Normal"], group="FVG Appearance")
fvgMaxPerTF = input.int(3, "Max FVGs Per Timeframe", minval=1, maxval=10, group="FVG Appearance")

// IFVG Appearance
bullIFVGColor = input.color(color.new(color.blue, 90), "Bullish IFVG Color", group="IFVG Appearance")
bearIFVGColor = input.color(color.new(color.purple, 90), "Bearish IFVG Color", group="IFVG Appearance")
ifvgBorderColor = input.color(color.new(color.white, 80), "IFVG Border Color", group="IFVG Appearance")
showIFVGBorder = input.bool(true, "Show IFVG Borders", group="IFVG Appearance")
ifvgMaxPerTF = input.int(3, "Max IFVGs Per Timeframe", minval=1, maxval=10, group="IFVG Appearance")

// Color inputs
bullErlIrlColor = input.color(title="BULLISH ERL to IRL Color", defval=color.rgb(120, 123, 198), group="State Colors")
bullIrlErlColor = input.color(title="BULLISH IRL to ERL Color", defval=color.rgb(101, 255, 255), group="State Colors")
bearErlIrlColor = input.color(title="BEARISH ERL to IRL Color", defval=color.rgb(198, 123, 120), group="State Colors")
bearIrlErlColor = input.color(title="BEARISH IRL to ERL Color", defval=color.rgb(255, 101, 101), group="State Colors")
textColor = input.color(title="Table Text Color", defval=TEXT_COLOR, group="Table Style")
headerTextColor = input.color(title="Header Text Color", defval=HEADER_TEXT, group="Table Style")

// Table creation with dynamic text size
var table stateTable = table.new(position.top_right, columns=3, rows=25, bgcolor=BG_COLOR, frame_width=1, frame_color=color.new(color.gray, 80), border_width=0, border_color=color.new(color.gray, 85))

// Helper functions
getTableTextSize(string size) =>
    switch size
        "Tiny" => size.tiny
        "Small" => size.small
        "Normal" => size.normal
        "Large" => size.large
        "Huge" => size.huge
        => size.normal

getTrendText(state) =>
    var string result = ""
    if state == STATE_BULL_ERL_TO_IRL
        result := "▼ Bullish Retracement"
    else if state == STATE_BULL_IRL_TO_ERL
        result := "▲ Bullish Expansion"
    else if state == STATE_BEAR_ERL_TO_IRL
        result := "▲ Bearish Retracement"
    else if state == STATE_BEAR_IRL_TO_ERL
        result := "▼ Bearish Expansion"
    result

getStateColor(state) =>
    state == STATE_BULL_ERL_TO_IRL ? color.new(bullErlIrlColor, cellBgTransparency + 10) : 
     state == STATE_BULL_IRL_TO_ERL ? color.new(bullIrlErlColor, cellBgTransparency + 10) : 
     state == STATE_BEAR_ERL_TO_IRL ? color.new(bearErlIrlColor, cellBgTransparency + 10) : 
     color.new(bearIrlErlColor, cellBgTransparency + 10)

// Calculate dynamic probability based on timeframe alignment and historical performance
calculateDynamicProbability(string signalType, string direction) =>
    float baseProbability = 0.0
    
    // Set base probability by signal type
    if signalType == "STRONG BULLISH" or signalType == "STRONG BEARISH"
        baseProbability := 0.75
    else if signalType == "STRONG COUNTER"
        baseProbability := 0.65
    else if signalType == "WEAK BULLISH" or signalType == "WEAK BEARISH"
        baseProbability := 0.55
    else if signalType == "REVERSAL"
        baseProbability := 0.60
    
    // Count aligned timeframes in the signal direction
    int alignedCount = 0
    int totalTimeframes = 7  // Monthly, Weekly, Daily, 4H, 1H, 15M, 5M
    
    if direction == "▲"  // Bullish direction
        if str.contains(stateMonthly, "BULL") and str.contains(stateMonthly, "IRL ▲ ERL")
            alignedCount += 1
        if str.contains(stateWeekly, "BULL") and str.contains(stateWeekly, "IRL ▲ ERL")
            alignedCount += 1
        if str.contains(stateDaily, "BULL") and str.contains(stateDaily, "IRL ▲ ERL")
            alignedCount += 1
        if str.contains(state4H, "BULL") and str.contains(state4H, "IRL ▲ ERL")
            alignedCount += 1
        if str.contains(state1H, "BULL") and str.contains(state1H, "IRL ▲ ERL")
            alignedCount += 1
        if str.contains(state15M, "BULL") and str.contains(state15M, "IRL ▲ ERL")
            alignedCount += 1
        if str.contains(state5M, "BULL") and str.contains(state5M, "IRL ▲ ERL")
            alignedCount += 1
    else  // Bearish direction
        if str.contains(stateMonthly, "BEAR") and str.contains(stateMonthly, "IRL ▼ ERL")
            alignedCount += 1
        if str.contains(stateWeekly, "BEAR") and str.contains(stateWeekly, "IRL ▼ ERL")
            alignedCount += 1
        if str.contains(stateDaily, "BEAR") and str.contains(stateDaily, "IRL ▼ ERL")
            alignedCount += 1
        if str.contains(state4H, "BEAR") and str.contains(state4H, "IRL ▼ ERL")
            alignedCount += 1
        if str.contains(state1H, "BEAR") and str.contains(state1H, "IRL ▼ ERL")
            alignedCount += 1
        if str.contains(state15M, "BEAR") and str.contains(state15M, "IRL ▼ ERL")
            alignedCount += 1
        if str.contains(state5M, "BEAR") and str.contains(state5M, "IRL ▼ ERL")
            alignedCount += 1
    
    // Adjust probability based on alignment (up to +15%)
    float alignmentBonus = math.min(alignedCount / totalTimeframes * 0.15, 0.15)
    
    // Get historical performance adjustment (up to +10%)
    float perfAdjustment = 0.0
    if signalType == "STRONG BULLISH" and array.size(strongBullishPerf) > 0
        perfAdjustment := array.avg(strongBullishPerf) * 0.1
    else if signalType == "STRONG BEARISH" and array.size(strongBearishPerf) > 0
        perfAdjustment := array.avg(strongBearishPerf) * 0.1
    else if signalType == "STRONG COUNTER" and array.size(strongCounterPerf) > 0
        perfAdjustment := array.avg(strongCounterPerf) * 0.1
    else if signalType == "WEAK BULLISH" and array.size(weakBullishPerf) > 0
        perfAdjustment := array.avg(weakBullishPerf) * 0.1
    else if signalType == "WEAK BEARISH" and array.size(weakBearishPerf) > 0
        perfAdjustment := array.avg(weakBearishPerf) * 0.1
    else if signalType == "REVERSAL" and array.size(reversalPerf) > 0
        perfAdjustment := array.avg(reversalPerf) * 0.1
    
    // Calculate final probability (base + alignment bonus + performance adjustment)
    float finalProbability = math.min(baseProbability + alignmentBonus + perfAdjustment, 0.95)
    finalProbability

getOpportunityStrength(string higherTFState, string lowerTFState) =>
    string result = ""
    string signalType = ""
    string direction = ""
    float probability = 0.0
    
    if (higherTFState == STATE_BULL_IRL_TO_ERL and lowerTFState == STATE_BULL_IRL_TO_ERL) and showStrongBullish
        signalType := "STRONG BULLISH"
        direction := "▲"
        result := signalType + " " + direction
    else if (higherTFState == STATE_BEAR_IRL_TO_ERL and lowerTFState == STATE_BEAR_IRL_TO_ERL) and showStrongBearish
        signalType := "STRONG BEARISH"
        direction := "▼"
        result := signalType + " " + direction
    else if ((higherTFState == STATE_BULL_ERL_TO_IRL and lowerTFState == STATE_BULL_ERL_TO_IRL) or
             (higherTFState == STATE_BEAR_ERL_TO_IRL and lowerTFState == STATE_BEAR_ERL_TO_IRL)) and showStrongCounter
        signalType := "STRONG COUNTER"
        direction := higherTFState == STATE_BULL_ERL_TO_IRL ? "▼" : "▲"
        result := signalType + " " + direction
    else if (higherTFState == STATE_BULL_ERL_TO_IRL and lowerTFState == STATE_BULL_IRL_TO_ERL) and showWeakBullish
        signalType := "WEAK BULLISH"
        direction := "▲"
        result := signalType + " " + direction
    else if (higherTFState == STATE_BEAR_ERL_TO_IRL and lowerTFState == STATE_BEAR_IRL_TO_ERL) and showWeakBearish
        signalType := "WEAK BEARISH"
        direction := "▼"
        result := signalType + " " + direction
    else if showReversal and (
         // Higher TF in expansion, lower TF in retracement
         (higherTFState == STATE_BULL_IRL_TO_ERL and lowerTFState == STATE_BULL_ERL_TO_IRL) or  // Bullish expansion → Bullish retracement
         (higherTFState == STATE_BEAR_IRL_TO_ERL and lowerTFState == STATE_BEAR_ERL_TO_IRL) or  // Bearish expansion → Bearish retracement
         // Higher TF in retracement, lower TF in expansion
         (higherTFState == STATE_BULL_ERL_TO_IRL and lowerTFState == STATE_BULL_IRL_TO_ERL) or  // Bullish retracement → Bullish expansion
         (higherTFState == STATE_BEAR_ERL_TO_IRL and lowerTFState == STATE_BEAR_IRL_TO_ERL))    // Bearish retracement → Bearish expansion
        
        // Determine if this is a bullish or bearish reversal based on the lower timeframe direction
        signalType := "REVERSAL"
        direction := lowerTFState == STATE_BULL_IRL_TO_ERL or lowerTFState == STATE_BEAR_ERL_TO_IRL ? "▲" : "▼"
        result := signalType + " " + direction
    
    // Calculate dynamic probability if we have a signal
    if result != ""
        probability := calculateDynamicProbability(signalType, direction)
        
        // Add probability percentage if enabled
        if showProbability
            result := result + " (" + str.tostring(math.round(probability * 100)) + "%)"
        
    [result, probability]

getOpportunityColor(string signal) =>
    color result = na
    if str.contains(signal, "STRONG BULLISH")
        result := color.new(bullishBgColor, cellBgTransparency + 5)
    else if str.contains(signal, "STRONG BEARISH")
        result := color.new(bearishBgColor, cellBgTransparency + 5)
    else if str.contains(signal, "STRONG COUNTER")
        result := color.new(color.yellow, cellBgTransparency + 10)
    else if str.contains(signal, "WEAK BULLISH")
        result := color.new(color.new(bullishBgColor, 80), cellBgTransparency + 5)
    else if str.contains(signal, "WEAK BEARISH")
        result := color.new(color.new(bearishBgColor, 80), cellBgTransparency + 5)
    else if str.contains(signal, "REVERSAL")
        result := color.new(color.purple, cellBgTransparency + 10)
    else
        result := color.new(color.gray, cellBgTransparency + 10)
    result

getEntryPoint(string timeframePair, string direction) =>
    var string pdArray = ""
    var string entryTF = ""
    
    if timeframePair == "Monthly-Weekly"
        pdArray := direction == "▲" ? "Weekly Bullish PD Array" : direction == "▼" ? "Weekly Bearish PD Array" : ""
        entryTF := "Daily Entry"
    else if timeframePair == "Weekly-Daily"
        pdArray := direction == "▲" ? "Daily Bullish PD Array" : direction == "▼" ? "Daily Bearish PD Array" : ""
        entryTF := "4H Entry"
    else if timeframePair == "Daily-4H"
        pdArray := direction == "▲" ? "4H Bullish PD Array" : direction == "▼" ? "4H Bearish PD Array" : ""
        entryTF := "1H Entry"
    else if timeframePair == "4H-1H"
        pdArray := direction == "▲" ? "1H Bullish PD Array" : direction == "▼" ? "1H Bearish PD Array" : ""
        entryTF := "15M Entry"
    else if timeframePair == "1H-15M"
        pdArray := direction == "▲" ? "15M Bullish PD Array" : direction == "▼" ? "15M Bearish PD Array" : ""
        entryTF := "1M Entry"
    else if timeframePair == "15M-5M"
        pdArray := direction == "▲" ? "5M Bullish PD Array" : direction == "▼" ? "5M Bearish PD Array" : ""
        entryTF := "15S Entry"
    
    "ENTRY: " + pdArray + ", " + entryTF

getTargetPoint(string signalType, string direction, string timeframePair) =>
    var string result = ""
    string tf = ""
    
    // Extract timeframe from the pair for PD Array references
    if timeframePair == "Monthly-Weekly"
        tf := "Weekly"
    else if timeframePair == "Weekly-Daily"
        tf := "Daily"
    else if timeframePair == "Daily-4H"
        tf := "4H"
    else if timeframePair == "4H-1H"
        tf := "1H"
    else if timeframePair == "1H-15M"
        tf := "15M"
    else if timeframePair == "15M-5M"
        tf := "5M"
    
    // Determine target based on signal type and direction
    if str.contains(signalType, "STRONG BULLISH")
        result := "TARGET: BSL (Buy Side Liquidity)"
    else if str.contains(signalType, "STRONG BEARISH")
        result := "TARGET: SSL (Sell Side Liquidity)"
    else if str.contains(signalType, "REVERSAL")
        if direction == "▲"
            result := "TARGET: " + tf + " Bearish PD Array at ~50% CDR"
        else
            result := "TARGET: " + tf + " Bullish PD Array at ~50% CDR"
    else if str.contains(signalType, "WEAK BULLISH")
        result := "TARGET: BSL (Buy Side Liquidity)"
    else if str.contains(signalType, "WEAK BEARISH")
        result := "TARGET: SSL (Sell Side Liquidity)"
    else if str.contains(signalType, "STRONG COUNTER")
        if direction == "▲"
            result := "TARGET: " + tf + " Bearish PD Array at ~50% CDR"
        else
            result := "TARGET: " + tf + " Bullish PD Array at ~50% CDR"
    
    result

getFVGs(timeframe, bullIFVGArray, bearIFVGArray, terminatedFVGArray) =>
    // Use the passed arrays instead of creating new ones
    var bullFVGs = array.new_box(0)
    var bearFVGs = array.new_box(0)
    var bullIFVGs = array.new_box(0)
    var bearIFVGs = array.new_box(0)
   
    // Get candle data including middle candle with gaps_on to ensure we get data
    [h0, l0, h1, l1, h2, l2] = request.security(syminfo.tickerid, timeframe, [high, low, high[1], low[1], high[2], low[2]], lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)
    [o0, c0] = request.security(syminfo.tickerid, timeframe, [open, close], lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)
   
    // Check if we have valid data before proceeding
    if not na(h0) and not na(l0) and not na(h1) and not na(l1) and not na(h2) and not na(l2)
        // Regular FVG Detection
        // Bullish FVG: low[0] > high[2]
        if l0 > h2 and array.size(bullFVGs) < fvgMaxPerTF and ((timeframe == "M" and showMonthlyFVG) or (timeframe == "W" and showWeeklyFVG) or (timeframe == "D" and showDailyFVG) or (timeframe == "240" and show4HFVG) or (timeframe == "60" and show1HFVG) or (timeframe == "15" and show15MFVG) or (timeframe == "5" and show5MFVG) or (timeframe == timeframe.period and showChartTFFVG))
            borderCol = showFVGBorder ? fvgBorderColor : na
            textSize = fvgLabelSize == "Tiny" ? size.tiny : fvgLabelSize == "Small" ? size.small : size.normal
            newFVG = box.new(bar_index, l0, bar_index + fvgExtension, h2,
                             bgcolor=bullFVGColor,
                             border_color=borderCol,
                             border_width=1,
                             text="FVG " + timeframe,
                             text_color=color.white,
                             text_size=textSize,
                             text_halign=text.align_right,
                             extend=extend.right)
            array.push(bullFVGs, newFVG)

        // Bearish FVG: high[0] < low[2]
        if h0 < l2 and array.size(bearFVGs) < fvgMaxPerTF and ((timeframe == "M" and showMonthlyFVG) or (timeframe == "W" and showWeeklyFVG) or (timeframe == "D" and showDailyFVG) or (timeframe == "240" and show4HFVG) or (timeframe == "60" and show1HFVG) or (timeframe == "15" and show15MFVG) or (timeframe == "5" and show5MFVG) or (timeframe == timeframe.period and showChartTFFVG))
            borderCol = showFVGBorder ? fvgBorderColor : na
            textSize = fvgLabelSize == "Tiny" ? size.tiny : fvgLabelSize == "Small" ? size.small : size.normal
            newFVG = box.new(bar_index, l2, bar_index + fvgExtension, h0,
                             bgcolor=bearFVGColor,
                             border_color=borderCol,
                             border_width=1,
                             text="FVG " + timeframe,
                             text_color=color.white,
                             text_size=textSize,
                             text_halign=text.align_right,
                             extend=extend.right)
            array.push(bearFVGs, newFVG)

        // IFVG Detection
        // Bullish IFVG: low[1] > high[0] AND low[1] > high[2]
        if l1 > h0 and l1 > h2 and array.size(bullIFVGs) < ifvgMaxPerTF and ((timeframe == "M" and showMonthlyIFVG) or (timeframe == "W" and showWeeklyIFVG) or (timeframe == "D" and showDailyIFVG) or (timeframe == "240" and show4HIFVG) or (timeframe == "60" and show1HIFVG) or (timeframe == "15" and show15MIFVG) or (timeframe == "5" and show5MIFVG) or (timeframe == timeframe.period and showChartTFIFVG))
            borderCol = showIFVGBorder ? ifvgBorderColor : na
            textSize = fvgLabelSize == "Tiny" ? size.tiny : fvgLabelSize == "Small" ? size.small : size.normal
            newIFVG = box.new(bar_index, h0, bar_index + fvgExtension, l1,
                             bgcolor=bullIFVGColor,
                             border_color=borderCol,
                             border_width=1,
                             text="IFVG " + timeframe,
                             text_color=color.white,
                             text_size=textSize,
                             text_halign=text.align_right,
                             extend=extend.right)
            array.push(bullIFVGs, newIFVG)

        // Bearish IFVG: high[1] < low[0] AND high[1] < low[2]
        if h1 < l0 and h1 < l2 and array.size(bearIFVGs) < ifvgMaxPerTF and ((timeframe == "M" and showMonthlyIFVG) or (timeframe == "W" and showWeeklyIFVG) or (timeframe == "D" and showDailyIFVG) or (timeframe == "240" and show4HIFVG) or (timeframe == "60" and show1HIFVG) or (timeframe == "15" and show15MIFVG) or (timeframe == "5" and show5MIFVG) or (timeframe == timeframe.period and showChartTFIFVG))
            borderCol = showIFVGBorder ? ifvgBorderColor : na
            textSize = fvgLabelSize == "Tiny" ? size.tiny : fvgLabelSize == "Small" ? size.small : size.normal
            newIFVG = box.new(bar_index, l0, bar_index + fvgExtension, h1,
                             bgcolor=bearIFVGColor,
                             border_color=borderCol,
                             border_width=1,
                             text="IFVG " + timeframe,
                             text_color=color.white,
                             text_size=textSize,
                             text_halign=text.align_right,
                             extend=extend.right)
            array.push(bearIFVGs, newIFVG)

    [bullFVGs, bearFVGs, bullIFVGs, bearIFVGs]


// Create separate FVG arrays for each timeframe
var monthlyBullFVGs = array.new_box(0)
var monthlyBearFVGs = array.new_box(0)
var weeklyBullFVGs = array.new_box(0)
var weeklyBearFVGs = array.new_box(0)
var dailyBullFVGs = array.new_box(0)
var dailyBearFVGs = array.new_box(0)
var h4BullFVGs = array.new_box(0)
var h4BearFVGs = array.new_box(0)
var h1BullFVGs = array.new_box(0)
var h1BearFVGs = array.new_box(0)
var m15BullFVGs = array.new_box(0)
var m15BearFVGs = array.new_box(0)
var m5BullFVGs = array.new_box(0)
var m5BearFVGs = array.new_box(0)
var chartTFBullFVGs = array.new_box(0)
var chartTFBearFVGs = array.new_box(0)

// Create separate IFVG arrays for each timeframe
var monthlyBullIFVGs = array.new_box(0)
var monthlyBearIFVGs = array.new_box(0)
var weeklyBullIFVGs = array.new_box(0)
var weeklyBearIFVGs = array.new_box(0)
var dailyBullIFVGs = array.new_box(0)
var dailyBearIFVGs = array.new_box(0)
var h4BullIFVGs = array.new_box(0)
var h4BearIFVGs = array.new_box(0)
var h1BullIFVGs = array.new_box(0)
var h1BearIFVGs = array.new_box(0)
var m15BullIFVGs = array.new_box(0)
var m15BearIFVGs = array.new_box(0)
var m5BullIFVGs = array.new_box(0)
var m5BearIFVGs = array.new_box(0)
var chartTFBullIFVGs = array.new_box(0)
var chartTFBearIFVGs = array.new_box(0)

// Arrays to track terminated FVGs that might become IFVGs
var monthlyTerminatedFVGs = array.new_float(0)
var weeklyTerminatedFVGs = array.new_float(0)
var dailyTerminatedFVGs = array.new_float(0)
var h4TerminatedFVGs = array.new_float(0)
var h1TerminatedFVGs = array.new_float(0)
var m15TerminatedFVGs = array.new_float(0)
var m5TerminatedFVGs = array.new_float(0)
var chartTFTerminatedFVGs = array.new_float(0)

// Track last processed bar for each timeframe to prevent duplicate FVGs
var int lastMonthlyBar = 0
var int lastWeeklyBar = 0
var int lastDailyBar = 0
var int lastH4Bar = 0
var int lastH1Bar = 0
var int last15MBar = 0
var int last5MBar = 0

// Clear all FVG and IFVG boxes on first bar of chart
if barstate.isfirst
    array.clear(monthlyBullFVGs)
    array.clear(monthlyBearFVGs)
    array.clear(weeklyBullFVGs)
    array.clear(weeklyBearFVGs)
    array.clear(dailyBullFVGs)
    array.clear(dailyBearFVGs)
    array.clear(h4BullFVGs)
    array.clear(h4BearFVGs)
    array.clear(h1BullFVGs)
    array.clear(h1BearFVGs)
    array.clear(m15BullFVGs)
    array.clear(m15BearFVGs)
    array.clear(m5BullFVGs)
    array.clear(m5BearFVGs)
    array.clear(chartTFBullFVGs)
    array.clear(chartTFBearFVGs)

    // Clear IFVG arrays
    array.clear(monthlyBullIFVGs)
    array.clear(monthlyBearIFVGs)
    array.clear(weeklyBullIFVGs)
    array.clear(weeklyBearIFVGs)
    array.clear(dailyBullIFVGs)
    array.clear(dailyBearIFVGs)
    array.clear(h4BullIFVGs)
    array.clear(h4BearIFVGs)
    array.clear(h1BullIFVGs)
    array.clear(h1BearIFVGs)
    array.clear(m15BullIFVGs)
    array.clear(m15BearIFVGs)
    array.clear(m5BullIFVGs)
    array.clear(m5BearIFVGs)
    array.clear(chartTFBullIFVGs)
    array.clear(chartTFBearIFVGs)
   
    // Clear terminated FVG arrays
    array.clear(monthlyTerminatedFVGs)
    array.clear(weeklyTerminatedFVGs)
    array.clear(dailyTerminatedFVGs)
    array.clear(h4TerminatedFVGs)
    array.clear(h1TerminatedFVGs)
    array.clear(m15TerminatedFVGs)
    array.clear(m5TerminatedFVGs)
    array.clear(chartTFTerminatedFVGs)

// Helper function to limit FVG arrays
limitFVGArrays() =>
    while array.size(monthlyBullFVGs) > fvgMaxPerTF
        box.delete(array.shift(monthlyBullFVGs))
    while array.size(monthlyBearFVGs) > fvgMaxPerTF
        box.delete(array.shift(monthlyBearFVGs))
    while array.size(weeklyBullFVGs) > fvgMaxPerTF
        box.delete(array.shift(weeklyBullFVGs))
    while array.size(weeklyBearFVGs) > fvgMaxPerTF
        box.delete(array.shift(weeklyBearFVGs))
    while array.size(dailyBullFVGs) > fvgMaxPerTF
        box.delete(array.shift(dailyBullFVGs))
    while array.size(dailyBearFVGs) > fvgMaxPerTF
        box.delete(array.shift(dailyBearFVGs))
    while array.size(h4BullFVGs) > fvgMaxPerTF
        box.delete(array.shift(h4BullFVGs))
    while array.size(h4BearFVGs) > fvgMaxPerTF
        box.delete(array.shift(h4BearFVGs))
    while array.size(h1BullFVGs) > fvgMaxPerTF
        box.delete(array.shift(h1BullFVGs))
    while array.size(h1BearFVGs) > fvgMaxPerTF
        box.delete(array.shift(h1BearFVGs))
    while array.size(m15BullFVGs) > fvgMaxPerTF
        box.delete(array.shift(m15BullFVGs))
    while array.size(m15BearFVGs) > fvgMaxPerTF
        box.delete(array.shift(m15BearFVGs))
    while array.size(m5BullFVGs) > fvgMaxPerTF
        box.delete(array.shift(m5BullFVGs))
    while array.size(m5BearFVGs) > fvgMaxPerTF
        box.delete(array.shift(m5BearFVGs))
    while array.size(chartTFBullFVGs) > fvgMaxPerTF
        box.delete(array.shift(chartTFBullFVGs))
    while array.size(chartTFBearFVGs) > fvgMaxPerTF
        box.delete(array.shift(chartTFBearFVGs))

    // Limit IFVG arrays
    while array.size(monthlyBullIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(monthlyBullIFVGs))
    while array.size(monthlyBearIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(monthlyBearIFVGs))
    while array.size(weeklyBullIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(weeklyBullIFVGs))
    while array.size(weeklyBearIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(weeklyBearIFVGs))
    while array.size(dailyBullIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(dailyBullIFVGs))
    while array.size(dailyBearIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(dailyBearIFVGs))
    while array.size(h4BullIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(h4BullIFVGs))
    while array.size(h4BearIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(h4BearIFVGs))
    while array.size(h1BullIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(h1BullIFVGs))
    while array.size(h1BearIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(h1BearIFVGs))
    while array.size(m15BullIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(m15BullIFVGs))
    while array.size(m15BearIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(m15BearIFVGs))
    while array.size(m5BullIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(m5BullIFVGs))
    while array.size(m5BearIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(m5BearIFVGs))
    while array.size(chartTFBullIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(chartTFBullIFVGs))
    while array.size(chartTFBearIFVGs) > ifvgMaxPerTF
        box.delete(array.shift(chartTFBearIFVGs))

// Limit FVG arrays to prevent overcrowding
limitFVGArrays()

// Get current bar time for each timeframe - using gaps_on to ensure we get data
monthlyTime = request.security(syminfo.tickerid, "M", time, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)
weeklyTime = request.security(syminfo.tickerid, "W", time, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)
dailyTime = request.security(syminfo.tickerid, "D", time, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)
h4Time = request.security(syminfo.tickerid, "240", time, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)
h1Time = request.security(syminfo.tickerid, "60", time, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)
m15Time = request.security(syminfo.tickerid, "15", time, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)
m5Time = request.security(syminfo.tickerid, "5", time, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_on)

// Monthly FVGs - only process on new monthly bars
if barstate.islast and (showMonthlyFVG or showMonthlyIFVG)
    [monthlyBullFVGs, monthlyBearFVGs, monthlyBullIFVGs, monthlyBearIFVGs] = getFVGs("M", monthlyBullIFVGs, monthlyBearIFVGs, monthlyTerminatedFVGs)

// Weekly FVGs - only process on new weekly bars
if barstate.islast and (showWeeklyFVG or showWeeklyIFVG)
    [weeklyBullFVGs, weeklyBearFVGs, weeklyBullIFVGs, weeklyBearIFVGs] = getFVGs("W", weeklyBullIFVGs, weeklyBearIFVGs, weeklyTerminatedFVGs)

// Daily FVGs - only process on new daily bars
if barstate.islast and (showDailyFVG or showDailyIFVG)
    [dailyBullFVGs, dailyBearFVGs, dailyBullIFVGs, dailyBearIFVGs] = getFVGs("D", dailyBullIFVGs, dailyBearIFVGs, dailyTerminatedFVGs)

// 4H FVGs - only process on new 4H bars
if barstate.islast and (show4HFVG or show4HIFVG)
    [h4BullFVGs, h4BearFVGs, h4BullIFVGs, h4BearIFVGs] = getFVGs("240", h4BullIFVGs, h4BearIFVGs, h4TerminatedFVGs)

// 1H FVGs - only process on new 1H bars
if barstate.islast and (show1HFVG or show1HIFVG)
    [h1BullFVGs, h1BearFVGs, h1BullIFVGs, h1BearIFVGs] = getFVGs("60", h1BullIFVGs, h1BearIFVGs, h1TerminatedFVGs)

// 15M FVGs - only process on new 15M bars
if barstate.islast and (show15MFVG or show15MIFVG)
    [m15BullFVGs, m15BearFVGs, m15BullIFVGs, m15BearIFVGs] = getFVGs("15", m15BullIFVGs, m15BearIFVGs, m15TerminatedFVGs)

// 5M FVGs - only process on new 5M bars
if barstate.islast and (show5MFVG or show5MIFVG)
    [m5BullFVGs, m5BearFVGs, m5BullIFVGs, m5BearIFVGs] = getFVGs("5", m5BullIFVGs, m5BearIFVGs, m5TerminatedFVGs)
   
// Chart Timeframe FVGs
if barstate.islast and (showChartTFFVG or showChartTFIFVG)
    [chartTFBullFVGs, chartTFBearFVGs, chartTFBullIFVGs, chartTFBearIFVGs] = getFVGs(timeframe.period, chartTFBullIFVGs, chartTFBearIFVGs, chartTFTerminatedFVGs)


if barstate.islast
    // Track current row for dynamic table sizing
    var int currentRow = 0
    currentRow := 0
   
    // Headers with dynamic text size - using color.new for more control
    table.cell(stateTable, 0, currentRow, "TF", bgcolor=color.new(HEADER_BG, headerBgTransparency), text_color=color.new(headerTextColor, 0), text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
    table.cell(stateTable, 1, currentRow, "━━━ STATE ━━━", bgcolor=color.new(HEADER_BG, headerBgTransparency), text_color=color.new(headerTextColor, 0), text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
    table.cell(stateTable, 2, currentRow, "━━━ TREND ━━━", bgcolor=color.new(HEADER_BG, headerBgTransparency), text_color=color.new(headerTextColor, 0), text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
    currentRow := currentRow + 1    
   
    // Monthly
    if showMonthlyTF
        table.cell(stateTable, 0, currentRow, "M", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, stateMonthly, bgcolor=getStateColor(stateMonthly), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getTrendText(stateMonthly), bgcolor=getStateColor(stateMonthly), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1

    // Weekly
    if showWeeklyTF
        table.cell(stateTable, 0, currentRow, "W", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, stateWeekly, bgcolor=getStateColor(stateWeekly), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getTrendText(stateWeekly), bgcolor=getStateColor(stateWeekly), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1
   
    // Daily
    if showDailyTF
        table.cell(stateTable, 0, currentRow, "D", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, stateDaily, bgcolor=getStateColor(stateDaily), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getTrendText(stateDaily), bgcolor=getStateColor(stateDaily), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1

    // 4H
    if show4HTF
        table.cell(stateTable, 0, currentRow, "4H", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, state4H, bgcolor=getStateColor(state4H), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getTrendText(state4H), bgcolor=getStateColor(state4H), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1

    // 1H
    if show1HTF
        table.cell(stateTable, 0, currentRow, "1H", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, state1H, bgcolor=getStateColor(state1H), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getTrendText(state1H), bgcolor=getStateColor(state1H), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1
   
    // 15M
    if show15MTF
        table.cell(stateTable, 0, currentRow, "15M", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, state15M, bgcolor=getStateColor(state15M), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getTrendText(state15M), bgcolor=getStateColor(state15M), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1
   
    // 5M
    if show5MTF
        table.cell(stateTable, 0, currentRow, "5M", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, state5M, bgcolor=getStateColor(state5M), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getTrendText(state5M), bgcolor=getStateColor(state5M), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1

    // Add a blank row for spacing
    currentRow := currentRow + 1
   
    // Opportunity Headers - using color.new for more control
    table.cell(stateTable, 0, currentRow, "OPP", bgcolor=color.new(HEADER_BG, headerBgTransparency), text_color=color.new(headerTextColor, 0), text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
    table.cell(stateTable, 1, currentRow, "━━━ ANALYSIS ━━━", bgcolor=color.new(HEADER_BG, headerBgTransparency), text_color=color.new(headerTextColor, 0), text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
    table.cell(stateTable, 2, currentRow, "━━━ ENTRY & TARGET ━━━", bgcolor=color.new(HEADER_BG, headerBgTransparency), text_color=color.new(headerTextColor, 0), text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
    currentRow := currentRow + 1
   
    // Process and display signals with dynamic text size
    // Monthly-Weekly
    [mw_signal, mw_prob] = getOpportunityStrength(stateMonthly, stateWeekly)
    if mw_signal != "" and showMW
        string direction = str.contains(mw_signal, "▲") ? "▲" : "▼"
        string signalType = mw_signal
        if str.contains(mw_signal, "(")  // Remove probability if present
            signalType := str.substring(mw_signal, 0, str.pos(mw_signal, "(") - 1)
        
        table.cell(stateTable, 0, currentRow, "Monthly-Weekly", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, mw_signal, bgcolor=getOpportunityColor(mw_signal), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getEntryPoint("Monthly-Weekly", direction) + "\n" + getTargetPoint(signalType, direction, "Monthly-Weekly"), bgcolor=getOpportunityColor(mw_signal), text_color=textColor, text_halign=text.align_left, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1


    // Weekly-Daily
    [wd_signal, wd_prob] = getOpportunityStrength(stateWeekly, stateDaily)
    if wd_signal != "" and showWD
        string direction = str.contains(wd_signal, "▲") ? "▲" : "▼"
        string signalType = wd_signal
        if str.contains(wd_signal, "(")  // Remove probability if present
            signalType := str.substring(wd_signal, 0, str.pos(wd_signal, "(") - 1)
            
        table.cell(stateTable, 0, currentRow, "Weekly-Daily", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, wd_signal, bgcolor=getOpportunityColor(wd_signal), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getEntryPoint("Weekly-Daily", direction) + "\n" + getTargetPoint(signalType, direction, "Weekly-Daily"), bgcolor=getOpportunityColor(wd_signal), text_color=textColor, text_halign=text.align_left, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1
   
    // Daily-4H
    [d4h_signal, d4h_prob] = getOpportunityStrength(stateDaily, state4H)
    if d4h_signal != "" and showD4H
        string direction = str.contains(d4h_signal, "▲") ? "▲" : "▼"
        string signalType = d4h_signal
        if str.contains(d4h_signal, "(")  // Remove probability if present
            signalType := str.substring(d4h_signal, 0, str.pos(d4h_signal, "(") - 1)
            
        table.cell(stateTable, 0, currentRow, "Daily-4H", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, d4h_signal, bgcolor=getOpportunityColor(d4h_signal), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getEntryPoint("Daily-4H", direction) + "\n" + getTargetPoint(signalType, direction, "Daily-4H"), bgcolor=getOpportunityColor(d4h_signal), text_color=textColor, text_halign=text.align_left, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1
   
    // 4H-1H
    [h4h1_signal, h4h1_prob] = getOpportunityStrength(state4H, state1H)
    if h4h1_signal != "" and show4H1H
        string direction = str.contains(h4h1_signal, "▲") ? "▲" : "▼"
        string signalType = h4h1_signal
        if str.contains(h4h1_signal, "(")  // Remove probability if present
            signalType := str.substring(h4h1_signal, 0, str.pos(h4h1_signal, "(") - 1)
            
        table.cell(stateTable, 0, currentRow, "4H-1H", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, h4h1_signal, bgcolor=getOpportunityColor(h4h1_signal), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getEntryPoint("4H-1H", direction) + "\n" + getTargetPoint(signalType, direction, "4H-1H"), bgcolor=getOpportunityColor(h4h1_signal), text_color=textColor, text_halign=text.align_left, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1


    // 1H-15M
    [h1m15_signal, h1m15_prob] = getOpportunityStrength(state1H, state15M)
    if h1m15_signal != "" and show1H15M
        string direction = str.contains(h1m15_signal, "▲") ? "▲" : "▼"
        string signalType = h1m15_signal
        if str.contains(h1m15_signal, "(")  // Remove probability if present
            signalType := str.substring(h1m15_signal, 0, str.pos(h1m15_signal, "(") - 1)
            
        table.cell(stateTable, 0, currentRow, "1H-15M", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, h1m15_signal, bgcolor=getOpportunityColor(h1m15_signal), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getEntryPoint("1H-15M", direction) + "\n" + getTargetPoint(signalType, direction, "1H-15M"), bgcolor=getOpportunityColor(h1m15_signal), text_color=textColor, text_halign=text.align_left, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1
   
    // 15M-5M
    [m15m5_signal, m15m5_prob] = getOpportunityStrength(state15M, state5M)
    if m15m5_signal != "" and show15M5M
        string direction = str.contains(m15m5_signal, "▲") ? "▲" : "▼"
        string signalType = m15m5_signal
        if str.contains(m15m5_signal, "(")  // Remove probability if present
            signalType := str.substring(m15m5_signal, 0, str.pos(m15m5_signal, "(") - 1)
            
        table.cell(stateTable, 0, currentRow, "15M-5M", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 1, currentRow, m15m5_signal, bgcolor=getOpportunityColor(m15m5_signal), text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
        table.cell(stateTable, 2, currentRow, getEntryPoint("15M-5M", direction) + "\n" + getTargetPoint(signalType, direction, "15M-5M"), bgcolor=getOpportunityColor(m15m5_signal), text_color=textColor, text_halign=text.align_left, text_size=getTableTextSize(tableTextSize))
        currentRow := currentRow + 1
    
    // Update signal tracking for performance measurement
    if barstate.isconfirmed
        // Monthly-Weekly signal tracking
        if mw_signal != lastMWSignal and mw_signal != ""
            lastMWSignal := mw_signal
            lastMWSignalBar := bar_index
        
        // Weekly-Daily signal tracking
        if wd_signal != lastWDSignal and wd_signal != ""
            lastWDSignal := wd_signal
            lastWDSignalBar := bar_index
            
        // Daily-4H signal tracking
        if d4h_signal != lastD4HSignal and d4h_signal != ""
            lastD4HSignal := d4h_signal
            lastD4HSignalBar := bar_index
            
        // 4H-1H signal tracking
        if h4h1_signal != lastH4H1Signal and h4h1_signal != ""
            lastH4H1Signal := h4h1_signal
            lastH4H1SignalBar := bar_index
            
        // 1H-15M signal tracking
        if h1m15_signal != lastH1M15Signal and h1m15_signal != ""
            lastH1M15Signal := h1m15_signal
            lastH1M15SignalBar := bar_index
            
        // 15M-5M signal tracking
        if m15m5_signal != lastM15M5Signal and m15m5_signal != ""
            lastM15M5Signal := m15m5_signal
            lastM15M5SignalBar := bar_index
            
        // Measure performance of signals after lookbackPeriod bars
        if lastMWSignalBar > 0 and bar_index - lastMWSignalBar == lookbackPeriod
            float perfValue = str.contains(lastMWSignal, "▲") ? (close - close[lookbackPeriod]) / close[lookbackPeriod] : (close[lookbackPeriod] - close) / close[lookbackPeriod]
            if str.contains(lastMWSignal, "STRONG BULLISH")
                array.push(strongBullishPerf, perfValue)
                if array.size(strongBullishPerf) > 10
                    array.shift(strongBullishPerf)
            else if str.contains(lastMWSignal, "STRONG BEARISH")
                array.push(strongBearishPerf, perfValue)
                if array.size(strongBearishPerf) > 10
                    array.shift(strongBearishPerf)
            else if str.contains(lastMWSignal, "STRONG COUNTER")
                array.push(strongCounterPerf, perfValue)
                if array.size(strongCounterPerf) > 10
                    array.shift(strongCounterPerf)
            else if str.contains(lastMWSignal, "WEAK BULLISH")
                array.push(weakBullishPerf, perfValue)
                if array.size(weakBullishPerf) > 10
                    array.shift(weakBullishPerf)
            else if str.contains(lastMWSignal, "WEAK BEARISH")
                array.push(weakBearishPerf, perfValue)
                if array.size(weakBearishPerf) > 10
                    array.shift(weakBearishPerf)
            else if str.contains(lastMWSignal, "REVERSAL")
                array.push(reversalPerf, perfValue)
                if array.size(reversalPerf) > 10
                    array.shift(reversalPerf)
        
    // Add Timeframe Harmony indicator if enabled
    if showHarmony
        // Count aligned bullish and bearish states
        int bullishCount = 0
        int bearishCount = 0
        
        // Check each timeframe state
        if str.contains(stateMonthly, "BULL") 
            bullishCount += 1
        else
            bearishCount += 1
            
        if str.contains(stateWeekly, "BULL")
            bullishCount += 1
        else
            bearishCount += 1
            
        if str.contains(stateDaily, "BULL")
            bullishCount += 1
        else
            bearishCount += 1
            
        if str.contains(state4H, "BULL")
            bullishCount += 1
        else
            bearishCount += 1
            
        if str.contains(state1H, "BULL")
            bullishCount += 1
        else
            bearishCount += 1
            
        if str.contains(state15M, "BULL")
            bullishCount += 1
        else
            bearishCount += 1
            
        if str.contains(state5M, "BULL")
            bullishCount += 1
        else
            bearishCount += 1
        
        // Display harmony if threshold is met
        if bullishCount >= harmonyThreshold or bearishCount >= harmonyThreshold
            currentRow := currentRow + 1
            string harmonyText = ""
            color harmonyColor = na
            
            if bullishCount >= harmonyThreshold
                harmonyText := "BULLISH HARMONY (" + str.tostring(bullishCount) + "/7)"
                harmonyColor := color.new(bullishBgColor, cellBgTransparency)
            else
                harmonyText := "BEARISH HARMONY (" + str.tostring(bearishCount) + "/7)"
                harmonyColor := color.new(bearishBgColor, cellBgTransparency)
                
            table.cell(stateTable, 0, currentRow, "HARMONY", bgcolor=color.new(color.gray, cellBgTransparency), text_color=textColor, text_halign=text.align_right, text_size=getTableTextSize(tableTextSize))
            table.cell(stateTable, 1, currentRow, harmonyText, bgcolor=harmonyColor, text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))
            table.cell(stateTable, 2, currentRow, "", bgcolor=harmonyColor, text_color=textColor, text_halign=text.align_center, text_size=getTableTextSize(tableTextSize))

