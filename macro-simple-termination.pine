//@version=5
indicator('WJ MACRO', overlay = true, max_lines_count = 500, max_labels_count = 100, max_bars_back=5000)

// Set max_bars_back for important series
max_bars_back(time, 5000)
max_bars_back(close, 5000)
max_bars_back(open, 5000)

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
group_ln     = 'London Time Settings'
lnSummerTime = input.bool(true , 'London Daylight Saving Time (DST)', group = group_ln, tooltip = 'London : Daylight Saving Time (DST)\n - DST Start : Last Sunday in March at 1:00 UTC\n - DST End   : Last Sunday in October at 1:00 UTC')

// Time zone settings
group_tz = 'Time Zone Settings'
timezone_offset = input.int(1, 'Chart to NY Time Offset (hours)', minval=-12, maxval=12, group=group_tz, tooltip='Adjust if your macros appear at wrong times. Positive if your chart time is ahead of NY, negative if behind.')
// Debug setting to help troubleshoot time issues
show_debug = input.bool(true, 'Show Time Debug Info', group=group_tz)

// FVG Settings
group_fvg = 'Fair Value Gap Settings'
showFVGs = input.bool(true, "Show Fair Value Gaps", group=group_fvg)
extendFVGs = input.bool(true, "Extend FVGs Until Filled", group=group_fvg)
fvgBullishColor = input.color(color.new(color.green, 80), "Bullish FVG Color", group=group_fvg)
fvgBearishColor = input.color(color.new(color.red, 80), "Bearish FVG Color", group=group_fvg)
fvgBorderWidth = input.int(0, "FVG Border Width", minval=0, maxval=3, group=group_fvg)
deleteHistoricalFVGs = input.bool(true, "Delete Historical FVGs", group=group_fvg)

// IFVG Settings
group_ifvg = 'Inversion Fair Value Gap Settings'
showIFVGs = input.bool(true, "Show Inversion Fair Value Gaps", group=group_ifvg)
extendIFVGs = input.bool(true, "Extend IFVGs Until Filled", group=group_ifvg)
ifvgBullishColor = input.color(color.new(color.lime, 80), "Bullish IFVG Color", group=group_ifvg)
ifvgBearishColor = input.color(color.new(color.orange, 80), "Bearish IFVG Color", group=group_ifvg)
ifvgBorderWidth = input.int(0, "IFVG Border Width", minval=0, maxval=3, group=group_ifvg)
deleteHistoricalIFVGs = input.bool(true, "Delete Historical IFVGs", group=group_ifvg)

group_m09 = 'New York 09:50 AM 10:10 Macro'
m09501010 = input.bool(true , '09:50 AM 10:10', group = group_m09)
m09_top   = input.bool(true, 'Top Line', inline = 'mc09', group = group_m09)
m09_mid   = input.bool(true, 'Mid Line', inline = 'mc09', group = group_m09)
m09_bot   = input.bool(true, 'Bottom Line', inline = 'mc09', group = group_m09)
m09_ext   = input.bool(true, 'Extending Lines', inline = 'mc09', group = group_m09)

group_c   = 'Macro Classification'
aColor    = input.color(color.gray, 'Accumulation', group = group_c)
mColor    = input.color(color.red , 'Manipulation', group = group_c)
eColor    = input.color(color.blue, 'Expansion'   , group = group_c)

// Macro line termination settings
group_term = 'Macro Line Termination'
macroLineWidth = input.int(3, "Macro Line Width", minval=1, maxval=5, group=group_term)

//-----------------------------------------------------------------------------}
//Main variables
//-----------------------------------------------------------------------------{
tf_m = timeframe.multiplier

// Macro structure
type MacroData
    int id
    bool enabled
    bool show_top
    bool show_mid
    bool show_bot
    bool show_ext
    int hour
    int minute
    string label_text
    float top_price
    float bot_price
    float mid_price
    int start_time
    int start_bar
    int end_bar
    int top_bar
    int bot_bar
    line top_line
    line bot_line
    line mid_line
    linefill fill
    string type

// Create array of macro data
var MacroData[] macros = array.new<MacroData>()

// Arrays for macro high/low lines
var array<line> macroHighLines = array.new<line>()
var array<line> macroLowLines = array.new<line>()
var array<float> macroHighPrices = array.new<float>()
var array<float> macroLowPrices = array.new<float>()

// Arrays for FVG tracking
var array<box> activeFVGBoxes = array.new<box>()
var array<float> fvgTopPrices = array.new<float>()
var array<float> fvgBottomPrices = array.new<float>()
var array<bool> fvgIsBullish = array.new<bool>()

// Arrays for IFVG tracking
var array<box> activeIFVGBoxes = array.new<box>()
var array<float> ifvgTopPrices = array.new<float>()
var array<float> ifvgBottomPrices = array.new<float>()
var array<bool> ifvgIsBullish = array.new<bool>()

// Initialize macros array
if barstate.isfirst
    array.push(macros, MacroData.new(3, m09501010, m09_top, m09_mid, m09_bot, m09_ext, 9, 50, '09:50 AM - 10:10', na, na, na, na, na, na, na, na, na, na, na, na, "accumulation"))

//-----------------------------------------------------------------------------}
// Function to check if current bar is at a specific hour and minute
//-----------------------------------------------------------------------------{
is_time(h, m) =>
    adjusted_hour = (h + timezone_offset) % 24
    hour == adjusted_hour and minute == m

//-----------------------------------------------------------------------------}
// Process macros if on supported timeframe
//-----------------------------------------------------------------------------{
if tf_m <= 5 or timeframe.isseconds
    for i = 0 to array.size(macros) - 1
        macro = array.get(macros, i)
        
        // Start of macro period
        if macro.enabled and is_time(macro.hour, macro.minute)
            macro.top_price := high
            macro.bot_price := low
            macro.mid_price := math.avg(macro.top_price, macro.bot_price)
            macro.start_time := time
            macro.top_bar := bar_index
            macro.bot_bar := bar_index
            macro.end_bar := bar_index + 20
            macro.type := "accumulation"
            
            if macro.show_top
                macro.top_line := line.new(bar_index, macro.top_price, macro.end_bar, macro.top_price, color=aColor, width=2)
            if macro.show_bot
                macro.bot_line := line.new(bar_index, macro.bot_price, macro.end_bar, macro.bot_price, color=aColor, width=2)
            if macro.show_mid
                macro.mid_line := line.new(bar_index, macro.mid_price, macro.end_bar, macro.mid_price, color=aColor, style=line.style_dotted)
            
            if macro.show_top and macro.show_bot
                macro.fill := linefill.new(macro.top_line, macro.bot_line, color.new(aColor, 90))
            
            macro.start_bar := bar_index
            array.set(macros, i, macro)
        
        // During macro period
        else if not na(macro.start_time) and time > macro.start_time and bar_index <= macro.end_bar
            if high > macro.top_price and not na(macro.top_line) and macro.show_top
                macro.top_price := high
                macro.top_bar := bar_index
                macro.top_line.set_y1(macro.top_price)
                macro.top_line.set_y2(macro.top_price)
            
            if low < macro.bot_price and not na(macro.bot_line) and macro.show_bot
                macro.bot_price := low
                macro.bot_bar := bar_index
                macro.bot_line.set_y1(macro.bot_price)
                macro.bot_line.set_y2(macro.bot_price)
            
            if (high > macro.top_price or low < macro.bot_price) and not na(macro.mid_line) and macro.show_mid
                macro.mid_price := math.avg(macro.top_price, macro.bot_price)
                macro.mid_line.set_y1(macro.mid_price)
                macro.mid_line.set_y2(macro.mid_price)
            
            array.set(macros, i, macro)
        
        // End of macro period
        else if bar_index == macro.end_bar
            label.new(bar_index, high, "END", color=color.yellow, textcolor=color.black, size=size.small)

// Create macro lines when macros end
for i = 0 to array.size(macros) - 1
    macro = array.get(macros, i)
    if bar_index == macro.end_bar and not na(macro.top_bar) and not na(macro.bot_bar)
        highLine = line.new(macro.top_bar, macro.top_price, macro.top_bar + 1, macro.top_price, color=color.red, width=macroLineWidth, extend=extend.right)
        lowLine = line.new(macro.bot_bar, macro.bot_price, macro.bot_bar + 1, macro.bot_price, color=color.blue, width=macroLineWidth, extend=extend.right)
        
        label.new(macro.top_bar, macro.top_price, "Buy Side Liquidity", style=label.style_label_down, color=color.new(color.black, 100), textcolor=color.white, size=size.small)
        label.new(macro.bot_bar, macro.bot_price, "Sell Side Liquidity", style=label.style_label_up, color=color.new(color.black, 100), textcolor=color.white, size=size.small)
        
        array.push(macroHighLines, highLine)
        array.push(macroLowLines, lowLine)
        array.push(macroHighPrices, macro.top_price)
        array.push(macroLowPrices, macro.bot_price)

// Terminate lines when price breaks through
if array.size(macroHighLines) > 0
    for i = array.size(macroHighLines) - 1 to 0
        line_obj = array.get(macroHighLines, i)
        if high > line.get_y1(line_obj)
            line.set_x2(line_obj, bar_index)
            line.set_extend(line_obj, extend.none)
            array.remove(macroHighLines, i)
            array.remove(macroHighPrices, i)

if array.size(macroLowLines) > 0
    for i = array.size(macroLowLines) - 1 to 0
        line_obj = array.get(macroLowLines, i)
        if low < line.get_y1(line_obj)
            line.set_x2(line_obj, bar_index)
            line.set_extend(line_obj, extend.none)
            array.remove(macroLowLines, i)
            array.remove(macroLowPrices, i)

// FVG Detection during macro periods
if showFVGs
    for i = 0 to array.size(macros) - 1
        macro = array.get(macros, i)
        if not na(macro.start_time) and time > macro.start_time and bar_index <= macro.end_bar
            if low > high[2]  // Bullish FVG
                borderColor = fvgBorderWidth > 0 ? color.green : color.new(color.green, 100)
                fvgBox = box.new(bar_index - 2, high[2], bar_index, low, bgcolor=fvgBullishColor, border_color=borderColor, border_width=fvgBorderWidth, extend=extend.right)
                array.push(activeFVGBoxes, fvgBox)
                array.push(fvgTopPrices, low)
                array.push(fvgBottomPrices, high[2])
                array.push(fvgIsBullish, true)
            if high < low[2]  // Bearish FVG
                borderColor = fvgBorderWidth > 0 ? color.red : color.new(color.red, 100)
                fvgBox = box.new(bar_index - 2, low[2], bar_index, high, bgcolor=fvgBearishColor, border_color=borderColor, border_width=fvgBorderWidth, extend=extend.right)
                array.push(activeFVGBoxes, fvgBox)
                array.push(fvgTopPrices, low[2])
                array.push(fvgBottomPrices, high)
                array.push(fvgIsBullish, false)

// FVG Termination
if array.size(activeFVGBoxes) > 0
    for i = array.size(activeFVGBoxes) - 1 to 0
        fvgBox = array.get(activeFVGBoxes, i)
        topPrice = array.get(fvgTopPrices, i)
        bottomPrice = array.get(fvgBottomPrices, i)
        isBullish = array.get(fvgIsBullish, i)
        
        terminated = false
        if isBullish and close < bottomPrice
            terminated := true
        if not isBullish and close > topPrice
            terminated := true
            
        if terminated
            if deleteHistoricalFVGs
                box.delete(fvgBox)
            
            // Create IFVG
            if showIFVGs
                leftBar = box.get_left(fvgBox)
                if isBullish
                    borderColor = ifvgBorderWidth > 0 ? color.orange : color.new(color.orange, 100)
                    ifvgBox = box.new(leftBar, bottomPrice, bar_index, topPrice, bgcolor=ifvgBearishColor, border_color=borderColor, border_width=ifvgBorderWidth, extend=extend.right)
                    array.push(activeIFVGBoxes, ifvgBox)
                    array.push(ifvgTopPrices, topPrice)
                    array.push(ifvgBottomPrices, bottomPrice)
                    array.push(ifvgIsBullish, false)
                else
                    borderColor = ifvgBorderWidth > 0 ? color.lime : color.new(color.lime, 100)
                    ifvgBox = box.new(leftBar, bottomPrice, bar_index, topPrice, bgcolor=ifvgBullishColor, border_color=borderColor, border_width=ifvgBorderWidth, extend=extend.right)
                    array.push(activeIFVGBoxes, ifvgBox)
                    array.push(ifvgTopPrices, topPrice)
                    array.push(ifvgBottomPrices, bottomPrice)
                    array.push(ifvgIsBullish, true)
            
            array.remove(activeFVGBoxes, i)
            array.remove(fvgTopPrices, i)
            array.remove(fvgBottomPrices, i)
            array.remove(fvgIsBullish, i)

// IFVG Termination
if array.size(activeIFVGBoxes) > 0
    for i = array.size(activeIFVGBoxes) - 1 to 0
        ifvgBox = array.get(activeIFVGBoxes, i)
        topPrice = array.get(ifvgTopPrices, i)
        bottomPrice = array.get(ifvgBottomPrices, i)
        isBullish = array.get(ifvgIsBullish, i)
        
        terminated = false
        if isBullish and close < bottomPrice
            terminated := true
        if not isBullish and close > topPrice
            terminated := true
            
        if terminated
            if deleteHistoricalIFVGs
                box.delete(ifvgBox)
            
            array.remove(activeIFVGBoxes, i)
            array.remove(ifvgTopPrices, i)
            array.remove(ifvgBottomPrices, i)
            array.remove(ifvgIsBullish, i)

//-----------------------------------------------------------------------------}