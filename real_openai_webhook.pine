//@version=5
indicator("ðŸ¤– REAL OpenAI Trading Assistant", overlay=true)

// This sends REAL data to OpenAI via webhook
webhook_url = input.string("https://your-railway-app.railway.app/api/ai-signal-analysis", "OpenAI Webhook URL")

// Technical indicators
rsi = ta.rsi(close, 14)
[macd_line, signal_line, histogram] = ta.macd(close, 12, 26, 9)
volume_sma = ta.sma(volume, 20)
atr = ta.atr(14)

// ICT concepts
fvg_up = low[2] > high and close > close[2]
fvg_down = high[2] < low and close < close[2]
bullish_ob = close > open and close[1] < open[1] and volume > volume_sma
bearish_ob = close < open and close[1] > open[1] and volume > volume_sma

// Session detection
current_session = hour >= 8 and hour < 13 ? "LONDON" : hour >= 13 and hour < 20 ? "NY" : "ASIA"

// Create webhook payload for REAL OpenAI analysis
get_openai_payload() =>
    '{"symbol": "' + syminfo.ticker + 
    '", "price": ' + str.tostring(close) + 
    ', "rsi": ' + str.tostring(rsi) + 
    ', "macd": ' + str.tostring(macd_line) + 
    ', "volume": ' + str.tostring(volume) + 
    ', "volume_sma": ' + str.tostring(volume_sma) + 
    ', "atr": ' + str.tostring(atr) + 
    ', "session": "' + current_session + 
    '", "fvg_up": ' + str.tostring(fvg_up) + 
    ', "fvg_down": ' + str.tostring(fvg_down) + 
    ', "order_block": ' + str.tostring(bullish_ob or bearish_ob) + 
    ', "timestamp": "' + str.tostring(time) + '"}'

// Trigger conditions for OpenAI analysis
significant_move = math.abs(close - close[1]) > atr * 0.5
new_bar = barstate.isconfirmed
time_trigger = minute % 15 == 0  // Every 15 minutes

// Send to OpenAI when conditions met
if (significant_move or time_trigger) and barstate.islast
    openai_data = get_openai_payload()
    // This creates a TradingView alert that sends data to your webhook
    alert(openai_data, alert.freq_once_per_bar)

// Visual elements (you'll get OpenAI response via separate notification)
plotshape(fvg_up, "FVG Up", shape.triangleup, location.belowbar, color.blue, size=size.small)
plotshape(fvg_down, "FVG Down", shape.triangledown, location.abovebar, color.orange, size=size.small)

// Status table
var table status_table = table.new(position.top_right, 2, 5, bgcolor=color.black, border_width=1)
if barstate.islast
    table.cell(status_table, 0, 0, "ðŸ¤– REAL OpenAI", text_color=color.lime)
    table.cell(status_table, 1, 0, "ACTIVE", text_color=color.yellow)
    table.cell(status_table, 0, 1, "Price", text_color=color.white)
    table.cell(status_table, 1, 1, str.tostring(close, "#.##"), text_color=color.yellow)
    table.cell(status_table, 0, 2, "Session", text_color=color.white)
    table.cell(status_table, 1, 2, current_session, text_color=color.aqua)
    table.cell(status_table, 0, 3, "RSI", text_color=color.white)
    table.cell(status_table, 1, 3, str.tostring(rsi, "#"), text_color=color.yellow)
    table.cell(status_table, 0, 4, "Status", text_color=color.white)
    table.cell(status_table, 1, 4, "SENDING TO AI", text_color=color.lime)