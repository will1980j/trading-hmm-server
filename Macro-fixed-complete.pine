how_debug and barstate.islast
    var table debug_table = table.new(position.top_right, 3, 3)
    table.cell(debug_table, 0, 0, "Current Hour:", text_color=color.white)
    table.cell(debug_table, 1, 0, str.tostring(hour), text_color=color.yellow)
    table.cell(debug_table, 0, 1, "Current Minute:", text_color=color.white)
    table.cell(debug_table, 1, 1, str.tostring(minute), text_color=color.yellow)
    table.cell(debug_table, 0, 2, "Timezone Offset:", text_color=color.white)
    table.cell(debug_table, 1, 2, str.tostring(timezone_offset), text_color=color.yellow)

if tf_m <= 5
    // Process all macros
    for i = 0 to array.size(macros) - 1
        macro = array.get(macros, i)
        
        // Start of macro period
        if macro.enabled and is_time(macro.hour, macro.minute)
            macro.top_price := high
            macro.bot_price := low
            macro.mid_price := math.avg(macro.top_price, macro.bot_price)
            macro.start_time := time
            
            // Adjust end_bar based on timeframe
            // For 1m chart: 20 bars = 20 minutes
            // For 3m chart: ~7 bars = 21 minutes
            // For 5m chart: 4 bars = 20 minutes
            if tf_m == 1
                macro.end_bar := bar_index + 20
            else if tf_m == 3
                macro.end_bar := bar_index + 7
            else if tf_m == 5
                macro.end_bar := bar_index + 4
            else
                macro.end_bar := bar_index + math.round(20 / tf_m)
            
            // Determine macro type based on price action
            var float prev_close = close[1]
            var float prev_open = open[1]
            
            // Default to accumulation
            macro.type := "accumulation"
            
            // Check for manipulation (strong directional move)
            if math.abs(close - open) > math.abs(prev_close - prev_open) * 1.5
                macro.type := "manipulation"
            
            // Check for expansion (increased volatility)
            if high - low > (high[1] - low[1]) * 1.3
                macro.type := "expansion"
            
            // Set colors based on macro type
            color line_color = aColor
            if macro.type == "manipulation"
                line_color := mColor
            else if macro.type == "expansion"
                line_color := eColor
                
            // Use custom colors if enabled
            if enableCustomColors
                if macro.show_top
                    macro.top_line := line.new(bar_index, macro.top_price, macro.end_bar, macro.top_price, color=topLineColor, width=2)
                else
                    macro.top_line := line.new(bar_index, macro.top_price, macro.end_bar, macro.top_price, color=line_color, width=2)
                
                if macro.show_bot
                    macro.bot_line := line.new(bar_index, macro.bot_price, macro.end_bar, macro.bot_price, color=botLineColor, width=2)
                else
                    macro.bot_line := line.new(bar_index, macro.bot_price, macro.end_bar, macro.bot_price, color=line_color, width=2)
                
                if macro.show_mid
                    macro.mid_line := line.new(bar_index, macro.mid_price, macro.end_bar, macro.mid_price, color=midLineColor, style=line.style_dotted)
                else
                    macro.mid_line := line.new(bar_index, macro.mid_price, macro.end_bar, macro.mid_price, color=line_color, style=line.style_dotted)
            else
                if macro.show_top
                    macro.top_line := line.new(bar_index, macro.top_price, macro.end_bar, macro.top_price, color=line_color, width=2)
                
                if macro.show_bot
                    macro.bot_line := line.new(bar_index, macro.bot_price, macro.end_bar, macro.bot_price, color=line_color, width=2)
                
                if macro.show_mid
                    macro.mid_line := line.new(bar_index, macro.mid_price, macro.end_bar, macro.mid_price, color=line_color, style=line.style_dotted)
            
            if mcText != 'None'
                string labelText = "MACRO\n" + macro.label_text
                if showMacroType
                    labelText := labelText + "\n" + macro.type
                label.new(bar_index, macro.top_price, labelText, style=label.style_label_down, 
                         color=color.new(color.black, 80), textcolor=color.white, size=mcSize)
            
            if macro.show_top and macro.show_bot
                if enableCustomColors
                    macro.fill := linefill.new(macro.top_line, macro.bot_line, color.new(bgColor, bgTransparency))
                else
                    macro.fill := linefill.new(macro.top_line, macro.bot_line, color.new(line_color, 90))
            
            array.set(macros, i, macro)
        
        // During macro period - update lines to expand with price
        else if not na(macro.start_time) and time > macro.start_time and bar_index <= macro.end_bar
            // Update macro type based on ongoing price action
            if math.abs(close - open) > math.abs(close[1] - open[1]) * 1.5
                macro.type := "manipulation"
            
            if high - low > (high[1] - low[1]) * 1.3
                macro.type := "expansion"
            
            // Set colors based on current macro type
            color line_color = aColor
            if macro.type == "manipulation"
                line_color := mColor
            else if macro.type == "expansion"
                line_color := eColor
            
            if high > macro.top_price and not na(macro.top_line) and macro.show_top
                macro.top_price := high
                macro.top_line.set_y1(macro.top_price)
                macro.top_line.set_y2(macro.top_price)
                if not enableCustomColors
                    macro.top_line.set_color(line_color)
            
            if low < macro.bot_price and not na(macro.bot_line) and macro.show_bot
                macro.bot_price := low
                macro.bot_line.set_y1(macro.bot_price)
                macro.bot_line.set_y2(macro.bot_price)
                if not enableCustomColors
                    macro.bot_line.set_color(line_color)
            
            if (high > macro.top_price or low < macro.bot_price) and not na(macro.mid_line) and macro.show_mid
                macro.mid_price := math.avg(macro.top_price, macro.bot_price)
                macro.mid_line.set_y1(macro.mid_price)
                macro.mid_line.set_y2(macro.mid_price)
                if not enableCustomColors
                    macro.mid_line.set_color(line_color)
                
            if not na(macro.fill)
                if enableCustomColors
                    macro.fill.set_color(color.new(bgColor, bgTransparency))
                else
                    macro.fill.set_color(color.new(line_color, 90))
            
            array.set(macros, i, macro)
        
        // End of macro period - add extending lines if enabled
        else if bar_index == macro.end_bar and macro.show_ext
            // Get the appropriate color based on macro type
            color line_color = aColor
            if macro.type == "manipulation"
                line_color := mColor
            else if macro.type == "expansion"
                line_color := eColor
                
            if not na(macro.top_line) and macro.show_top
                if enableCustomColors
                    line.new(macro.end_bar, macro.top_price, macro.end_bar + 50, macro.top_price, color=topLineColor, style=line.style_dotted)
                else
                    line.new(macro.end_bar, macro.top_price, macro.end_bar + 50, macro.top_price, color=line_color, style=line.style_dotted)
            
            if not na(macro.bot_line) and macro.show_bot
                if enableCustomColors
                    line.new(macro.end_bar, macro.bot_price, macro.end_bar + 50, macro.bot_price, color=botLineColor, style=line.style_dotted)
                else
                    line.new(macro.end_bar, macro.bot_price, macro.end_bar + 50, macro.bot_price, color=line_color, style=line.style_dotted)
            
            if not na(macro.mid_line) and macro.show_mid
                if enableCustomColors
                    line.new(macro.end_bar, macro.mid_price, macro.end_bar + 50, macro.mid_price, color=midLineColor, style=line.style_dotted)
                else
                    line.new(macro.end_bar, macro.mid_price, macro.end_bar + 50, macro.mid_price, color=line_color, style=line.style_dotted)
else
    if barstate.islast
        var table tf_note = table.new(position.bottom_right, 1, 1)
        table.cell(tf_note, 0, 0, 'ICT Macros are supported on:\n 1 min, 3 mins and 5 mins charts\n\n', text_size=size.small, text_color=chart.fg_color)
//-----------------------------------------------------------------------------}
    if barstate.islast
        var table tf_note = table.new(position.bottom_right, 1, 1)
        table.cell(tf_note, 0, 0, 'ICT Macros are supported on:\n 1 min, 3 mins and 5 mins charts\n\n', text_size=size.small, text_color=chart.fg_color)
//-----------------------------------------------------------------------------}