//@version=6
indicator("WJ 5M LQ", overlay=true, max_lines_count=500, max_bars_back=5000)

// Set max_bars_back for important series
max_bars_back(time, 5000)
max_bars_back(close, 5000)
max_bars_back(open, 5000)

htf = input.timeframe("5", "Higher Timeframe", options=["1", "3", "5", "15", "30", "45", "60", "120", "180", "240", "D", "W", "M"])
ltf = input.timeframe("1", "Lower Timeframe", options=["1", "3", "5", "15", "30", "45", "60", "120", "180", "240", "D"])

plotPivots = input.bool(true, title='Plot Pivots', group="Pivot Lines")
pivotLength = input.int(500, "Line Extension (bars)", minval=1, maxval=1000, group="Pivot Lines")
lineWidth = input.int(1, "Line Width", minval=1, maxval=4, group="Pivot Lines")
terminationType = input.string("Wicks", "Line Termination Type", options=["Wicks", "Body"], group="Pivot Lines")
showHighPivots = input.bool(true, "Show High Pivots", group="High Pivots")
highColor = input.color(color.red, "High Pivot Color", group="High Pivots")
highStyle = input.string("Dashed", title='High Pivot Style', options=["Solid", "Dotted", "Dashed"], group="High Pivots")
highExtend = input.string("None", title="High Pivot Extension", options=["None", "Right", "Left", "Both"], group="High Pivots")
showLowPivots = input.bool(true, "Show Low Pivots", group="Low Pivots")
lowColor = input.color(color.blue, "Low Pivot Color", group="Low Pivots")
lowStyle = input.string("Dashed", title='Low Pivot Style', options=["Solid", "Dotted", "Dashed"], group="Low Pivots")
lowExtend = input.string("None", title="Low Pivot Extension", options=["None", "Right", "Left", "Both"], group="Low Pivots")
maxPivots = input.int(500, title='Maximum Pivots', minval=1, maxval=500, group="Pivot Lines")
showLabels = input.bool(true, "Show Labels", group="Pivot Lines")

extendType(type) =>
    switch type
        "None" => extend.none
        "Right" => extend.right
        "Left" => extend.left
        "Both" => extend.both

styleType(type) =>
    switch type
        "Solid" => line.style_solid
        "Dotted" => line.style_dotted
        "Dashed" => line.style_dashed

var highExtendType = extendType(highExtend)
var lowExtendType = extendType(lowExtend)
var highStyleType = styleType(highStyle)
var lowStyleType = styleType(lowStyle)

var array<line> highLines = array.new<line>()
var array<line> lowLines = array.new<line>()
var array<float> highPivots = array.new<float>()
var array<float> lowPivots = array.new<float>()
var int lastPivotTime = 0

var float[] lastHTFHighs = array.new<float>()
var int[] lastHTFHighBars = array.new<int>()
var float[] lastHTFLows = array.new<float>()
var int[] lastHTFLowBars = array.new<int>()

// Simplified pivot detection
getPivots() =>
    float ph = ta.pivothigh(high, 1, 1)
    float pl = ta.pivotlow(low, 1, 1)
    int t = time[1]
    [ph, pl, t]

// Get HTF pivots using request.security
[htfPivotHigh, htfPivotLow, pivotTime] = request.security(syminfo.tickerid, htf, getPivots(), gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)

// LTF pivot detection using ta.pivot functions
ltfPivotHigh = ta.pivothigh(high, 1, 1)
ltfPivotLow = ta.pivotlow(low, 1, 1)

if not na(ltfPivotHigh)
    array.push(lastHTFHighs, ltfPivotHigh)
    array.push(lastHTFHighBars, bar_index - 1)

if not na(ltfPivotLow)
    array.push(lastHTFLows, ltfPivotLow)
    array.push(lastHTFLowBars, bar_index - 1)

var int maxArraySize = 15

// Calculate maxArraySize based on timeframe ratios
if htf == "15"
    maxArraySize := 15
if htf == "30"
    maxArraySize := 30
if htf == "60"
    maxArraySize := 60
if htf == "240"
    maxArraySize := 240
if htf == "D"
    maxArraySize := 1440
if htf == "W"
    maxArraySize := 7200

// Adjust array size based on lower timeframe
if timeframe.period == "1"
    maxArraySize := maxArraySize * 15
if timeframe.period == "5"
    maxArraySize := maxArraySize * 5
if timeframe.period == "15"
    maxArraySize := maxArraySize * (htf == "240" ? 16 : 3)  // 16 periods for 240min/15min ratio

if array.size(lastHTFHighs) > maxArraySize
    array.shift(lastHTFHighs)
    array.shift(lastHTFHighBars)
if array.size(lastHTFLows) > maxArraySize
    array.shift(lastHTFLows)
    array.shift(lastHTFLowBars)

lineBroken(float price, bool isHigh) =>
    if terminationType == "Wicks"
        isHigh ? (high >= price or open >= price or close >= price) : (low <= price or open <= price or close <= price)
    else
        isHigh ? (math.max(open, close) >= price) : (math.min(open, close) <= price)

// For HTF timeframe (modify the line creation sections)
if timeframe.period == htf
    if not na(htfPivotHigh) and pivotTime != lastPivotTime and showHighPivots
        lineH = line.new(bar_index - 1, htfPivotHigh, bar_index + pivotLength, htfPivotHigh, color=highColor, width=lineWidth, style=highStyleType, extend=highExtendType)
        if showLabels
            label.new(bar_index - 1, htfPivotHigh + (10 * syminfo.mintick), "Buy Side Liquidity", color=color.new(color.black, 100), textcolor=color.white, style=label.style_label_left, xloc=xloc.bar_index)
        array.push(highLines, lineH)
        array.push(highPivots, htfPivotHigh)

    if not na(htfPivotLow) and pivotTime != lastPivotTime and showLowPivots
        lineL = line.new(bar_index - 1, htfPivotLow, bar_index + pivotLength, htfPivotLow, color=lowColor, width=lineWidth, style=lowStyleType, extend=lowExtendType)
        if showLabels
            label.new(bar_index - 1, htfPivotLow - (15 * syminfo.mintick), "Sell Side Liquidity", color=color.new(color.black, 100), textcolor=color.white, style=label.style_label_left, xloc=xloc.bar_index)
        array.push(lowLines, lineL)
        array.push(lowPivots, htfPivotLow)

// For other timeframes (modify the line creation in the else block)
else
    if not na(htfPivotHigh) and pivotTime != lastPivotTime and array.size(lastHTFHighs) > 0
        for i = array.size(lastHTFHighs) - 1 to 0
            if array.get(lastHTFHighs, i) == htfPivotHigh
                startBar = array.get(lastHTFHighBars, i)
                lineH = line.new(startBar, htfPivotHigh, bar_index + pivotLength, htfPivotHigh, color=highColor, width=lineWidth, style=highStyleType, extend=highExtendType)
                if showLabels
                    label.new(startBar, htfPivotHigh + (10 * syminfo.mintick), "Buy Side Liquidity", color=color.new(color.black, 100), textcolor=color.white, style=label.style_label_left, xloc=xloc.bar_index)
                array.push(highLines, lineH)
                array.push(highPivots, htfPivotHigh)
                break

    if not na(htfPivotLow) and pivotTime != lastPivotTime and array.size(lastHTFLows) > 0
        for i = array.size(lastHTFLows) - 1 to 0
            if array.get(lastHTFLows, i) == htfPivotLow
                startBar = array.get(lastHTFLowBars, i)
                lineL = line.new(startBar, htfPivotLow, bar_index + pivotLength, htfPivotLow, color=lowColor, width=lineWidth, style=lowStyleType, extend=lowExtendType)
                if showLabels
                    label.new(startBar, htfPivotLow - (15* syminfo.mintick), "Sell Side Liquidity", color=color.new(color.black, 100), textcolor=color.white, style=label.style_label_left, xloc=xloc.bar_index)
                array.push(lowLines, lineL)
                array.push(lowPivots, htfPivotLow)
                break




if not na(htfPivotHigh) or not na(htfPivotLow)
    lastPivotTime := pivotTime

if array.size(highLines) > 0
    for i = array.size(highLines) - 1 to 0
        currentLine = array.get(highLines, i)
        linePrice = array.get(highPivots, i)
        if bar_index <= line.get_x2(currentLine)
            if lineBroken(linePrice, true)
                line.set_x2(currentLine, bar_index)
            else
                line.set_x2(currentLine, bar_index + pivotLength)

if array.size(lowLines) > 0
    for i = array.size(lowLines) - 1 to 0
        currentLine = array.get(lowLines, i)
        linePrice = array.get(lowPivots, i)
        if bar_index <= line.get_x2(currentLine)
            if lineBroken(linePrice, false)
                line.set_x2(currentLine, bar_index)
            else
                line.set_x2(currentLine, bar_index + pivotLength)

if array.size(highLines) > maxPivots
    line.delete(array.get(highLines, 0))
    array.remove(highLines, 0)
    array.remove(highPivots, 0)

if array.size(lowLines) > maxPivots
    line.delete(array.get(lowLines, 0))
    array.remove(lowLines, 0)
    array.remove(lowPivots, 0)