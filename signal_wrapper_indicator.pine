//@version=5
indicator("Signal Wrapper for Existing Indicator", overlay=true)

// ============================================================================
// WRAPPER INDICATOR - DETECTS YOUR EXISTING INDICATOR'S SIGNALS
// ============================================================================
// This indicator detects when your existing indicator shows triangles
// and sends enhanced data to the webhook
// ============================================================================

// Configuration
webhook_url = input.string("https://web-production-cd33.up.railway.app/api/live-signals-v2", "Signal Webhook URL")

// Detection method
detection_method = input.string("Visual Shapes", "Detection Method", options=["Visual Shapes", "Price Action", "Custom Logic"])

// Visual shape detection (if your indicator shows triangles)
detect_bullish_triangle() =>
    // This detects if there's a bullish shape plotted by another indicator
    // You may need to adjust this based on your indicator's visual output
    ta.crossover(close, ta.sma(close, 10)) // Placeholder - replace with actual detection

detect_bearish_triangle() =>
    // This detects if there's a bearish shape plotted by another indicator
    ta.crossunder(close, ta.sma(close, 10)) // Placeholder - replace with actual detection

// Alternative: Detect based on your indicator's conditions
// REPLACE THESE WITH YOUR ACTUAL SIGNAL CONDITIONS FROM YOUR EXISTING INDICATOR
your_bullish_condition = ta.crossover(ta.rsi(14), 30) // Replace with your logic
your_bearish_condition = ta.crossunder(ta.rsi(14), 70) // Replace with your logic

// Choose detection method
bullish_signal = detection_method == "Custom Logic" ? your_bullish_condition : detect_bullish_triangle()
bearish_signal = detection_method == "Custom Logic" ? your_bearish_condition : detect_bearish_triangle()

// Session validation
is_valid_session() =>
    h = hour(time, "America/New_York")
    m = minute(time, "America/New_York")
    
    valid = false
    if h >= 20 and h <= 23
        valid := true  // ASIA
    else if h >= 0 and h <= 5
        valid := true  // LONDON
    else if h >= 6 and (h < 8 or (h == 8 and m <= 29))
        valid := true  // NY PRE
    else if (h == 8 and m >= 30) or (h >= 9 and h <= 11)
        valid := true  // NY AM
    else if h == 12
        valid := true  // NY LUNCH
    else if h >= 13 and h <= 15
        valid := true  // NY PM
    
    valid

get_session() =>
    h = hour(time, "America/New_York")
    m = minute(time, "America/New_York")
    
    session = "INVALID"
    if h >= 20 and h <= 23
        session := "ASIA"
    else if h >= 0 and h <= 5
        session := "LONDON"
    else if h >= 6 and (h < 8 or (h == 8 and m <= 29))
        session := "NY_PRE"
    else if (h == 8 and m >= 30) or (h >= 9 and h <= 11)
        session := "NY_AM"
    else if h == 12
        session := "NY_LUNCH"
    else if h >= 13 and h <= 15
        session := "NY_PM"
    
    session

// Create enhanced payload
create_enhanced_payload(signal_type) =>
    session_name = get_session()
    atr_value = ta.atr(14)
    volatility = ta.stdev(close, 20)
    
    // Enhanced JSON with comprehensive data
    json_str = '{"signal_type":"' + signal_type + '","timestamp":' + str.tostring(time) + ',"session":"' + session_name + '","signal_candle":{"open":' + str.tostring(open) + ',"high":' + str.tostring(high) + ',"low":' + str.tostring(low) + ',"close":' + str.tostring(close) + ',"volume":' + str.tostring(volume) + '},"previous_candle":{"open":' + str.tostring(open[1]) + ',"high":' + str.tostring(high[1]) + ',"low":' + str.tostring(low[1]) + ',"close":' + str.tostring(close[1]) + '},"market_context":{"atr":' + str.tostring(atr_value) + ',"volatility":' + str.tostring(volatility) + '},"methodology_data":{"requires_confirmation":true,"stop_loss_buffer":25},"source":"wrapper_indicator"}'
    
    json_str

// Signal detection and webhook sending
if bullish_signal and is_valid_session()
    payload = create_enhanced_payload("Bullish")
    alert(payload, alert.freq_once_per_bar)
    
    // Optional: Show confirmation (small triangle so it doesn't interfere)
    plotshape(true, title="Bullish Detected", location=location.belowbar, 
              color=color.blue, style=shape.circle, size=size.tiny)

if bearish_signal and is_valid_session()
    payload = create_enhanced_payload("Bearish")
    alert(payload, alert.freq_once_per_bar)
    
    // Optional: Show confirmation (small triangle so it doesn't interfere)
    plotshape(true, title="Bearish Detected", location=location.abovebar, 
              color=color.red, style=shape.circle, size=size.tiny)

// Status table
if barstate.islast
    var table info = table.new(position.bottom_right, 2, 4, bgcolor=color.white, border_width=1)
    
    session_name = get_session()
    session_color = session_name == "INVALID" ? color.red : color.green
    
    table.cell(info, 0, 0, "Wrapper", text_color=color.black, bgcolor=color.yellow)
    table.cell(info, 1, 0, "Active", text_color=color.white, bgcolor=color.green)
    
    table.cell(info, 0, 1, "Session", text_color=color.black)
    table.cell(info, 1, 1, session_name, text_color=color.white, bgcolor=session_color)
    
    table.cell(info, 0, 2, "Method", text_color=color.black)
    table.cell(info, 1, 2, detection_method, text_color=color.black)
    
    table.cell(info, 0, 3, "Webhook", text_color=color.black)
    table.cell(info, 1, 3, "Ready", text_color=color.white, bgcolor=color.green)

// ============================================================================
// SETUP INSTRUCTIONS:
// 1. Add this indicator to the SAME chart as your existing indicator
// 2. Choose detection method in settings
// 3. If using "Custom Logic", replace the conditions above with your signal logic
// 4. Create alert on THIS indicator (not your existing one)
// 5. Set webhook URL and message as usual
// ============================================================================