//@version=5
indicator('WJ MACRO', overlay = true, max_lines_count = 500, max_labels_count = 100, max_bars_back=5000)

// Set max_bars_back for important series
max_bars_back(time, 5000)
max_bars_back(close, 5000)
max_bars_back(open, 5000)

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
group_ln     = 'London Time Settings'
lnSummerTime = input.bool(true , 'London Daylight Saving Time (DST)', group = group_ln, tooltip = 'London : Daylight Saving Time (DST)\n - DST Start : Last Sunday in March at 1:00 UTC\n - DST End   : Last Sunday in October at 1:00 UTC')

// Time zone settings
group_tz = 'Time Zone Settings'
timezone_offset = input.int(0, 'Chart to NY Time Offset (hours)', minval=-12, maxval=12, group=group_tz, tooltip='Adjust if your macros appear at wrong times. Positive if your chart time is ahead of NY, negative if behind.')
// Debug setting to help troubleshoot time issues
show_debug = input.bool(false, 'Show Time Debug Info', group=group_tz)

// === HTF Pivot Settings ===
showHTFPivots = input.bool(false, "Show Higher Timeframe Pivots", group="HTF Pivots")
htf = input.timeframe("15", "Higher Timeframe", options=["5", "15", "30", "45", "60", "120", "180", "240", "D"], group="HTF Pivots")
lineWidth = input.int(1, "Line Width", minval=1, maxval=4, group="HTF Pivots")
terminationType = input.string("Wicks", "Line Termination Type", options=["Wicks", "Body"], group="HTF Pivots")
highLineColor = input.color(color.red, "High Pivot Color", group="HTF Pivots")
lowLineColor = input.color(color.blue, "Low Pivot Color", group="HTF Pivots")
showLabels = input.bool(false, "Show Liquidity Labels", group="HTF Pivots")

// === Pivot Lines Settings ===
showPivotLines = input.bool(false, "Show Pivot Lines during Macros", group="Pivot Lines")
pivotLength = input.int(500, "Line Extension (bars)", group="Pivot Lines")

group_m02 = 'London 02:33 AM 03:00 Macro'
m02330300 = input.bool(false, '02:33 AM 03:00', group = group_m02)
m02_top   = input.bool(true, 'Top Line', inline = 'mc02', group = group_m02)
m02_mid   = input.bool(true, 'Mid Line', inline = 'mc02', group = group_m02)
m02_bot   = input.bool(true, 'Bottom Line', inline = 'mc02', group = group_m02)
m02_ext   = input.bool(true, 'Extending Lines', inline = 'mc02', group = group_m02)

group_m04 = 'London 04:03 AM 04:30 Macro'
m04030430 = input.bool(false, '04:03 AM 04:30', group = group_m04)
m04_top   = input.bool(true, 'Top Line', inline = 'mc04', group = group_m04)
m04_mid   = input.bool(true, 'Mid Line', inline = 'mc04', group = group_m04)
m04_bot   = input.bool(true, 'Bottom Line', inline = 'mc04', group = group_m04)
m04_ext   = input.bool(true, 'Extending Lines', inline = 'mc04', group = group_m04)

group_ny     = 'New York Time Settings'
// Auto-detect DST based on date
is_ny_dst() =>
    y = year(timenow)
    // Second Sunday in March
    dst_start_month = 3  // March
    dst_start_day = 1    // Start from day 1
    while dayofweek(timestamp(y, dst_start_month, dst_start_day)) != dayofweek.sunday or dst_start_day <= 7
        dst_start_day += 1
    dst_start_day += 7   // Second Sunday
    
    // First Sunday in November
    dst_end_month = 11   // November
    dst_end_day = 1      // Start from day 1
    while dayofweek(timestamp(y, dst_end_month, dst_end_day)) != dayofweek.sunday
        dst_end_day += 1
    
    dst_start = timestamp(y, dst_start_month, dst_start_day)
    dst_end = timestamp(y, dst_end_month, dst_end_day)
    
    timenow >= dst_start and timenow < dst_end

nySummerTime = is_ny_dst()

group_m08 = 'New York 08:50 AM 09:10 Macro'
m08500910 = input.bool(false, '08:50 AM 09:10', group = group_m08)
m08_top   = input.bool(true, 'Top Line', inline = 'mc08', group = group_m08)
m08_mid   = input.bool(true, 'Mid Line', inline = 'mc08', group = group_m08)
m08_bot   = input.bool(true, 'Bottom Line', inline = 'mc08', group = group_m08)
m08_ext   = input.bool(true, 'Extending Lines', inline = 'mc08', group = group_m08)

group_m09 = 'New York 09:50 AM 10:10 Macro'
m09501010 = input.bool(true , '09:50 AM 10:10', group = group_m09)
m09_top   = input.bool(true, 'Top Line', inline = 'mc09', group = group_m09)
m09_mid   = input.bool(true, 'Mid Line', inline = 'mc09', group = group_m09)
m09_bot   = input.bool(true, 'Bottom Line', inline = 'mc09', group = group_m09)
m09_ext   = input.bool(true, 'Extending Lines', inline = 'mc09', group = group_m09)

group_m10 = 'New York 10:50 AM 11:10 Macro'
m10501110 = input.bool(true , '10:50 AM 11:10', group = group_m10)
m10_top   = input.bool(true, 'Top Line', inline = 'mc10', group = group_m10)
m10_mid   = input.bool(true, 'Mid Line', inline = 'mc10', group = group_m10)
m10_bot   = input.bool(true, 'Bottom Line', inline = 'mc10', group = group_m10)
m10_ext   = input.bool(true, 'Extending Lines', inline = 'mc10', group = group_m10)

group_m11 = 'New York 11:50 AM 12:10 Launch Macro'
m11501210 = input.bool(false, '11:50 AM 12:10', group = group_m11)
m11_top   = input.bool(true, 'Top Line', inline = 'mc11', group = group_m11)
m11_mid   = input.bool(true, 'Mid Line', inline = 'mc11', group = group_m11)
m11_bot   = input.bool(true, 'Bottom Line', inline = 'mc11', group = group_m11)
m11_ext   = input.bool(true, 'Extending Lines', inline = 'mc11', group = group_m11)

group_m13 = 'New York 13:10 PM 13:40 Macro'
m13101340 = input.bool(true , '13:10 PM 13:40', group = group_m13)
m13_top   = input.bool(true, 'Top Line', inline = 'mc13', group = group_m13)
m13_mid   = input.bool(true, 'Mid Line', inline = 'mc13', group = group_m13)
m13_bot   = input.bool(true, 'Bottom Line', inline = 'mc13', group = group_m13)
m13_ext   = input.bool(true, 'Extending Lines', inline = 'mc13', group = group_m13)

group_m15 = 'New York 15:15 PM 15:45 Macro'
m15151545 = input.bool(true , '15:15 PM 15:45', group = group_m15)
m15_top   = input.bool(true, 'Top Line', inline = 'mc15', group = group_m15)
m15_mid   = input.bool(true, 'Mid Line', inline = 'mc15', group = group_m15)
m15_bot   = input.bool(true, 'Bottom Line', inline = 'mc15', group = group_m15)
m15_ext   = input.bool(true, 'Extending Lines', inline = 'mc15', group = group_m15)

// Add these input groups for new hourly macros
group_hourly = 'Hourly Macros'
m1650_1710 = input.bool(true, '16:50-17:10', group = group_hourly)
m1750_1810 = input.bool(true, '17:50-18:10', group = group_hourly)
m1850_1910 = input.bool(true, '18:50-19:10', group = group_hourly)
m1950_2010 = input.bool(true, '19:50-20:10', group = group_hourly)
m2050_2110 = input.bool(true, '20:50-21:10', group = group_hourly)
m2150_2210 = input.bool(true, '21:50-22:10', group = group_hourly)
m2250_2310 = input.bool(true, '22:50-23:10', group = group_hourly)
m2350_0010 = input.bool(true, '23:50-00:10', group = group_hourly)
m0050_0110 = input.bool(true, '00:50-01:10', group = group_hourly)
m0150_0210 = input.bool(true, '01:50-02:10', group = group_hourly)
m0250_0310 = input.bool(true, '02:50-03:10', group = group_hourly)
m0350_0410 = input.bool(true, '03:50-04:10', group = group_hourly)
m0450_0510 = input.bool(true, '04:50-05:10', group = group_hourly)
m0550_0610 = input.bool(true, '05:50-06:10', group = group_hourly)
m0650_0710 = input.bool(true, '06:50-07:10', group = group_hourly)
m0750_0810 = input.bool(true, '07:50-08:10', group = group_hourly)
m0850_0910 = input.bool(true, '08:50-09:10', group = group_hourly)
m0950_1010 = input.bool(true, '09:50-10:10', group = group_hourly)
m1020_1040 = input.bool(true, '10:20-10:40', group = group_hourly)
m1050_1110 = input.bool(true, '10:50-11:10', group = group_hourly)
m1150_1210 = input.bool(true, '11:50-12:10', group = group_hourly)
m1250_1310 = input.bool(true, '12:50-13:10', group = group_hourly)
m1350_1410 = input.bool(true, '13:50-14:10', group = group_hourly)
m1450_1510 = input.bool(true, '14:50-15:10', group = group_hourly)

// Special macros
group_special = 'Special Macros'
m1515_1545 = input.bool(true, '15:15-15:45 Final Hour', group = group_special)
m1545_1600 = input.bool(true, '15:45-16:00 MOC', group = group_special)

group_c   = 'Macro Classification'
pLen      = input.int(13, 'Length', minval = 5, maxval = 20, group = group_c)
pLoc      = input.string('Body', 'Swing Area', options = ['Wick', 'Body'], group = group_c)

aColor    = input.color(color.gray, 'Accumulation', group = group_c)
mColor    = input.color(color.red , 'Manipulation', group = group_c)
eColor    = input.color(color.blue, 'Expansion'   , group = group_c)

group_bg = 'Background & Line Colors'
enableCustomColors = input.bool(false, 'Enable Custom Colors', group = group_bg)
bgTransparency = input.int(90, 'Background Transparency', minval = 0, maxval = 100, group = group_bg)
topLineColor = input.color(color.green, 'Top Line Color', group = group_bg)
botLineColor = input.color(color.red, 'Bottom Line Color', group = group_bg)
midLineColor = input.color(color.yellow, 'Mid Line Color', group = group_bg)
bgColor = input.color(color.blue, 'Background Color', group = group_bg)

mcText    = input.string('Small', "Macro Texts", options=['Tiny', 'Small', 'Normal', 'None'])
showMacroType = input.bool(true, "Show Macro Type (A/M/E)", group = group_c)

mcSize = switch mcText
    'Tiny'   => size.tiny
    'Small'  => size.small
    'Normal' => size.normal
    => size.tiny

mcAlert    = input.bool(true, 'Alert Macro Times in Advance (Minutes)', inline = 'alert', tooltip = 'Enabling the option will plot a vertical line for the next macro time prior to the specified minutes\n\nNote: for alert configuration if not on 1 min chart please use round numbers')
mcAlertM   = input.int(30, '', minval = 5, maxval = 60, step = 5, inline = 'alert')

//-----------------------------------------------------------------------------}
//Main variables
//-----------------------------------------------------------------------------{
tf_m = timeframe.multiplier
bi   = bar_index

// === Variables for Pivot Lines ===
var array<line> highLines = array.new<line>()
var array<float> highPivots = array.new<float>()
var array<int> highPivotTimes = array.new<int>()

var array<line> lowLines = array.new<line>()
var array<float> lowPivots = array.new<float>()
var array<int> lowPivotTimes = array.new<int>()

// === Variables for HTF Pivot Lines ===
var array<line> htfHighLines = array.new<line>()
var array<float> htfHighPivots = array.new<float>()
var array<int> htfHighPivotTimes = array.new<int>()

var array<line> htfLowLines = array.new<line>()
var array<float> htfLowPivots = array.new<float>()
var array<int> htfLowPivotTimes = array.new<int>()

var int lastHTFPivotTime = 0

// Helper function for line termination
lineBroken(float price, bool isHigh) =>
    if terminationType == "Wicks"
        isHigh ? (high >= price) : (low <= price)
    else
        isHigh ? (math.max(open, close) >= price) : (math.min(open, close) <= price)

// Macro structure
type MacroData
    int id
    bool enabled
    bool show_top
    bool show_mid
    bool show_bot
    bool show_ext
    int hour
    int minute
    string label_text
    float top_price
    float bot_price
    float mid_price
    int start_time
    int end_bar
    line top_line
    line bot_line
    line mid_line
    linefill fill
    string type // "accumulation", "manipulation", or "expansion"
    bool in_macro_period
    array<float> macro_high_pivots
    array<float> macro_low_pivots
    array<line> macro_high_lines
    array<line> macro_low_lines
    bool htf_active
    array<float> htf_high_pivots
    array<float> htf_low_pivots
    array<line> htf_high_lines
    array<line> htf_low_lines

// Create array of macro data
var MacroData[] macros = array.new<MacroData>()

// Initialize macros array
if barstate.isfirst
    // London macros
    array.push(macros, MacroData.new(0, m02330300, m02_top, m02_mid, m02_bot, m02_ext, 2, 33, '02:33 AM - 03:00', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(1, m04030430, m04_top, m04_mid, m04_bot, m04_ext, 4, 3, '04:03 AM - 04:30', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    
    // New York macros
    array.push(macros, MacroData.new(2, m08500910, m08_top, m08_mid, m08_bot, m08_ext, 8, 50, '08:50 AM - 09:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(3, m09501010, m09_top, m09_mid, m09_bot, m09_ext, 9, 50, '09:50 AM - 10:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(4, m10501110, m10_top, m10_mid, m10_bot, m10_ext, 10, 50, '10:50 AM - 11:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(5, m11501210, m11_top, m11_mid, m11_bot, m11_ext, 11, 50, '11:50 AM - 12:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(6, m13101340, m13_top, m13_mid, m13_bot, m13_ext, 13, 10, '01:10 PM - 01:40', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(7, m15151545, m15_top, m15_mid, m15_bot, m15_ext, 15, 15, '03:15 PM - 03:45', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    
    // Hourly macros
    array.push(macros, MacroData.new(8, m1650_1710, true, true, true, true, 16, 50, '04:50 PM - 05:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(9, m1750_1810, true, true, true, true, 17, 50, '05:50 PM - 06:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(10, m1850_1910, true, true, true, true, 18, 50, '06:50 PM - 07:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(11, m1950_2010, true, true, true, true, 19, 50, '07:50 PM - 08:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(12, m2050_2110, true, true, true, true, 20, 50, '08:50 PM - 09:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(13, m2150_2210, true, true, true, true, 21, 50, '09:50 PM - 10:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(14, m2250_2310, true, true, true, true, 22, 50, '10:50 PM - 11:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(15, m2350_0010, true, true, true, true, 23, 50, '11:50 PM - 12:10', na, na, na, na, na, na, na, na, na, "accumulation", false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>(), false, array.new<float>(), array.new<float>(), array.new<line>(), array.new<line>()))