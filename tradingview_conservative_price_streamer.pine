//@version=5
indicator("NASDAQ Conservative Price Streamer", overlay=false)

// ============================================================================
// CONSERVATIVE REAL-TIME PRICE STREAMING - NEVER HITS LIMITS
// ============================================================================
// This version uses aggressive filtering to stay well under TradingView limits
// while still providing meaningful price updates for your automation system
// ============================================================================

// Configuration
webhook_url = input.string("https://web-production-cd33.up.railway.app/api/realtime-price", "Real-Time Price Webhook URL")
enable_streaming = input.bool(true, "Enable Real-Time Price Streaming")

// CONSERVATIVE FREQUENCY CONTROL
update_frequency = input.int(30, "Update Frequency (seconds)", minval=15, maxval=300)
price_threshold = input.float(2.0, "Minimum Price Change to Send Update (points)", minval=0.5)

// Session filtering - more restrictive
enable_session_filter = input.bool(true, "Only Stream During Active Sessions")
stream_only_major_sessions = input.bool(true, "Only Stream During NY AM/PM Sessions")

// ============================================================================
// SESSION DETECTION - MORE RESTRICTIVE
// ============================================================================

get_current_session() =>
    current_hour = hour(time, "America/New_York")
    current_minute = minute(time, "America/New_York")
    
    session_name = ""
    is_major_session = false
    
    // NY AM: 08:30-11:59 (MAJOR)
    if (current_hour == 8 and current_minute >= 30) or (current_hour >= 9 and current_hour <= 11)
        session_name := "NY AM"
        is_major_session := true
    // NY PM: 13:00-15:59 (MAJOR)
    else if current_hour >= 13 and current_hour <= 15
        session_name := "NY PM"
        is_major_session := true
    // LONDON: 00:00-05:59 (minor)
    else if current_hour >= 0 and current_hour <= 5
        session_name := "LONDON"
        is_major_session := false
    // NY PRE: 06:00-08:29 (minor)
    else if current_hour >= 6 and (current_hour < 8 or (current_hour == 8 and current_minute <= 29))
        session_name := "NY PRE"
        is_major_session := false
    // NY LUNCH: 12:00-12:59 (minor)
    else if current_hour == 12
        session_name := "NY LUNCH"
        is_major_session := false
    // ASIA: 20:00-23:59 (minor)
    else if current_hour >= 20 and current_hour <= 23
        session_name := "ASIA"
        is_major_session := false
    else
        session_name := "INVALID"
        is_major_session := false
    
    [session_name, is_major_session]

// ============================================================================
// ULTRA-CONSERVATIVE FREQUENCY CONTROL
// ============================================================================

// Track last update
var float last_sent_price = na
var int last_sent_time = na
var int updates_sent_today = 0
var int last_reset_day = na

// Reset daily counter
current_day = dayofweek(time)
if na(last_reset_day) or current_day != last_reset_day
    updates_sent_today := 0
    last_reset_day := current_day

// Daily limit safety (max 100 updates per day)
daily_limit_ok() =>
    updates_sent_today < 100

// Time threshold - much more conservative
time_threshold_met() =>
    if na(last_sent_time)
        true
    else
        (time - last_sent_time) >= (update_frequency * 1000)

// Price change threshold - more significant changes only
price_change_significant() =>
    if na(last_sent_price)
        true
    else
        math.abs(close - last_sent_price) >= price_threshold

// Volatility-based filtering - only send during volatile periods
is_volatile_period() =>
    // Calculate recent volatility (simple range over last few bars)
    recent_high = ta.highest(high, 10)
    recent_low = ta.lowest(low, 10)
    recent_range = recent_high - recent_low
    
    // Only send updates if we're in a volatile period (range > 5 points)
    recent_range > 5.0

// ============================================================================
// ULTRA-CONSERVATIVE STREAMING LOGIC
// ============================================================================

should_stream_update() =>
    [current_session, is_major] = get_current_session()
    
    // Basic checks
    if not enable_streaming
        false
    else if not daily_limit_ok()
        false  // Hit daily limit
    else if enable_session_filter and current_session == "INVALID"
        false
    else if stream_only_major_sessions and not is_major
        false  // Only major sessions
    else if not time_threshold_met()
        false  // Time threshold not met
    else if not price_change_significant()
        false  // Price change not significant
    else if not is_volatile_period()
        false  // Market not volatile enough
    else
        true

// Create conservative payload
create_conservative_payload() =>
    [current_session, is_major] = get_current_session()
    price_change = na(last_sent_price) ? 0 : close - last_sent_price
    
    payload = '{"type":"realtime_price",' +
              '"symbol":"NQ",' +
              '"price":' + str.tostring(close) + ',' +
              '"timestamp":' + str.tostring(time) + ',' +
              '"session":"' + current_session + '",' +
              '"volume":' + str.tostring(volume) + ',' +
              '"change":' + str.tostring(price_change) + ',' +
              '"bid":' + str.tostring(close - 0.25) + ',' +
              '"ask":' + str.tostring(close + 0.25) + ',' +
              '"volatility":"high"}'
    
    payload

// ============================================================================
// CONSERVATIVE STREAMING EXECUTION
// ============================================================================

if should_stream_update() and barstate.isconfirmed
    // Send the update
    payload = create_conservative_payload()
    alert(payload, alert.freq_once_per_bar)
    
    // Update tracking variables
    last_sent_price := close
    last_sent_time := time
    updates_sent_today := updates_sent_today + 1
    
    // Visual confirmation
    if barstate.islast
        label.new(bar_index, close, "SENT #" + str.tostring(updates_sent_today), 
                  color=color.green, textcolor=color.white, size=size.tiny)

// ============================================================================
// VISUAL ELEMENTS
// ============================================================================

// Plot price with volatility coloring
recent_range = ta.highest(high, 10) - ta.lowest(low, 10)
volatility_color = recent_range > 5.0 ? color.orange : color.blue
plot(close, title="NASDAQ Price", color=volatility_color, linewidth=2)

// Plot update eligibility
plot(should_stream_update() ? 1 : 0, title="Update Eligible", color=color.green, display=display.data_window)

// ============================================================================
// COMPREHENSIVE STATUS DASHBOARD
// ============================================================================

if barstate.islast
    var table status_table = table.new(position.top_right, 2, 10, bgcolor=color.white, border_width=1)
    
    [current_session, is_major] = get_current_session()
    session_color = current_session == "INVALID" ? color.red : is_major ? color.green : color.yellow
    
    // Session
    table.cell(status_table, 0, 0, "Session", text_color=color.black, bgcolor=color.yellow)
    table.cell(status_table, 1, 0, current_session, text_color=color.white, bgcolor=session_color)
    
    // Current price
    table.cell(status_table, 0, 1, "Price", text_color=color.black)
    table.cell(status_table, 1, 1, "$" + str.tostring(close), text_color=color.black)
    
    // Price change since last sent
    price_change = na(last_sent_price) ? 0 : close - last_sent_price
    change_color = math.abs(price_change) >= price_threshold ? color.green : color.gray
    table.cell(status_table, 0, 2, "Change", text_color=color.black)
    table.cell(status_table, 1, 2, str.tostring(price_change), text_color=color.white, bgcolor=change_color)
    
    // Update frequency
    table.cell(status_table, 0, 3, "Frequency", text_color=color.black)
    table.cell(status_table, 1, 3, str.tostring(update_frequency) + "s", text_color=color.black)
    
    // Time since last update
    seconds_since = na(last_sent_time) ? 0 : (time - last_sent_time) / 1000
    time_color = seconds_since >= update_frequency ? color.orange : color.green
    table.cell(status_table, 0, 4, "Last Update", text_color=color.black)
    table.cell(status_table, 1, 4, str.tostring(math.round(seconds_since)) + "s ago", text_color=color.white, bgcolor=time_color)
    
    // Daily updates sent
    daily_color = updates_sent_today > 80 ? color.red : updates_sent_today > 50 ? color.orange : color.green
    table.cell(status_table, 0, 5, "Daily Sent", text_color=color.black)
    table.cell(status_table, 1, 5, str.tostring(updates_sent_today) + "/100", text_color=color.white, bgcolor=daily_color)
    
    // Volatility status
    recent_range = ta.highest(high, 10) - ta.lowest(low, 10)
    vol_color = recent_range > 5.0 ? color.green : color.red
    table.cell(status_table, 0, 6, "Volatility", text_color=color.black)
    table.cell(status_table, 1, 6, recent_range > 5.0 ? "HIGH" : "LOW", text_color=color.white, bgcolor=vol_color)
    
    // Streaming status
    streaming_status = enable_streaming ? "ON" : "OFF"
    streaming_color = enable_streaming ? color.green : color.red
    table.cell(status_table, 0, 7, "Streaming", text_color=color.black)
    table.cell(status_table, 1, 7, streaming_status, text_color=color.white, bgcolor=streaming_color)
    
    // Price threshold
    table.cell(status_table, 0, 8, "Threshold", text_color=color.black)
    table.cell(status_table, 1, 8, str.tostring(price_threshold) + " pts", text_color=color.black)
    
    // Major session only
    table.cell(status_table, 0, 9, "Major Only", text_color=color.black)
    major_text = stream_only_major_sessions ? "YES" : "NO"
    major_color = stream_only_major_sessions ? color.orange : color.blue
    table.cell(status_table, 1, 9, major_text, text_color=color.white, bgcolor=major_color)

// ============================================================================
// CONSERVATIVE APPROACH SUMMARY
// ============================================================================
// 
// FREQUENCY LIMITS ADDRESSED:
// 1. 30-second minimum intervals (max 120 alerts/hour)
// 2. 2.0 point price threshold (only significant moves)
// 3. Major sessions only (NY AM/PM = ~7 hours/day)
// 4. Volatility filtering (only during active periods)
// 5. Daily limit of 100 updates (safety net)
// 
// EXPECTED ALERT FREQUENCY:
// - Quiet periods: 5-10 alerts/hour
// - Active periods: 20-40 alerts/hour  
// - Daily total: 30-80 alerts/day
// 
// RESULT: Well under all TradingView limits while capturing meaningful moves
// 
// ============================================================================

// Debug indicators
plotchar(should_stream_update(), "Will Stream", "●", location.bottom, 
         color=color.green, size=size.small, display=display.data_window)
plotchar(time_threshold_met(), "Time OK", "T", location.bottom, 
         color=color.blue, size=size.tiny, display=display.data_window)
plotchar(price_change_significant(), "Price OK", "P", location.bottom, 
         color=color.orange, size=size.tiny, display=display.data_window)
plotchar(is_volatile_period(), "Volatile", "V", location.bottom, 
         color=color.red, size=size.tiny, display=display.data_window)