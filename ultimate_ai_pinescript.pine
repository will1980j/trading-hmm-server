//@version=5
indicator("Ultimate AI Trading Assistant", overlay=true)

// Webhook URL input
webhook_url = input.string("http://your-server.com/api/ai-trading-webhook", "AI Webhook URL")

// Technical indicators for AI analysis
rsi = ta.rsi(close, 14)
[macd_line, signal_line, histogram] = ta.macd(close, 12, 26, 9)
volume_sma = ta.sma(volume, 20)
atr = ta.atr(14)

// ICT concepts
// Fair Value Gap detection
fvg_up = low[2] > high and close > close[2]
fvg_down = high[2] < low and close < close[2]

// Order Block detection (simplified)
bullish_ob = close > open and close[1] < open[1] and volume > volume_sma
bearish_ob = close < open and close[1] > open[1] and volume > volume_sma

// Market structure
higher_high = high > ta.highest(high[1], 10)
lower_low = low < ta.lowest(low[1], 10)

// Session detection
is_asia = hour >= 0 and hour < 8
is_london = hour >= 8 and hour < 13
is_ny_overlap = hour >= 13 and hour < 17
is_ny_pm = hour >= 17 and hour < 20

current_session = is_asia ? "ASIA" : is_london ? "LONDON" : is_ny_overlap ? "NY_OVERLAP" : is_ny_pm ? "NY_PM" : "AFTER_HOURS"

// Signal generation with AI context
long_signal = fvg_up and rsi < 70 and macd_line > signal_line
short_signal = fvg_down and rsi > 30 and macd_line < signal_line

// Enhanced data package for AI
get_ai_data() =>
    data = '{"symbol": "' + syminfo.ticker + 
           '", "price": ' + str.tostring(close) + 
           ', "timeframe": "' + timeframe.period + 
           '", "volume": ' + str.tostring(volume) + 
           ', "rsi": ' + str.tostring(rsi) + 
           ', "macd": ' + str.tostring(macd_line) + 
           ', "atr": ' + str.tostring(atr) + 
           ', "session": "' + current_session + 
           '", "fvg_up": ' + str.tostring(fvg_up) + 
           ', "fvg_down": ' + str.tostring(fvg_down) + 
           ', "bullish_ob": ' + str.tostring(bullish_ob) + 
           ', "bearish_ob": ' + str.tostring(bearish_ob) + 
           ', "higher_high": ' + str.tostring(higher_high) + 
           ', "lower_low": ' + str.tostring(lower_low) + 
           ', "timestamp": "' + str.tostring(time) + 
           '", "action": "ANALYZE"}'
    data

// Send comprehensive data to AI
if long_signal
    alert_data = get_ai_data()
    alert_data := str.replace(alert_data, '"action": "ANALYZE"', '"action": "LONG_SIGNAL"')
    alert(alert_data, alert.freq_once_per_bar)

if short_signal
    alert_data = get_ai_data()
    alert_data := str.replace(alert_data, '"action": "ANALYZE"', '"action": "SHORT_SIGNAL"')
    alert(alert_data, alert.freq_once_per_bar)

// Send periodic market updates to AI (every 15 minutes)
if barstate.islast and minute % 15 == 0
    market_update = get_ai_data()
    alert(market_update, alert.freq_once_per_bar)

// Visual elements
plotshape(long_signal, "AI Long", shape.triangleup, location.belowbar, color.lime, size=size.normal)
plotshape(short_signal, "AI Short", shape.triangledown, location.abovebar, color.red, size=size.normal)
plotshape(fvg_up, "FVG Up", shape.circle, location.belowbar, color.blue, size=size.tiny)
plotshape(fvg_down, "FVG Down", shape.circle, location.abovebar, color.orange, size=size.tiny)

// AI Analysis Table
var table ai_table = table.new(position.top_right, 2, 8, bgcolor=color.new(color.black, 80), border_width=1)

if barstate.islast
    table.cell(ai_table, 0, 0, "ðŸ¤– AI ASSISTANT", text_color=color.lime, text_size=size.normal)
    table.cell(ai_table, 1, 0, "", text_color=color.white)
    
    table.cell(ai_table, 0, 1, "Symbol", text_color=color.white)
    table.cell(ai_table, 1, 1, syminfo.ticker, text_color=color.yellow)
    
    table.cell(ai_table, 0, 2, "Price", text_color=color.white)
    table.cell(ai_table, 1, 2, str.tostring(close, "#.##"), text_color=color.yellow)
    
    table.cell(ai_table, 0, 3, "Session", text_color=color.white)
    table.cell(ai_table, 1, 3, current_session, text_color=color.aqua)
    
    table.cell(ai_table, 0, 4, "RSI", text_color=color.white)
    rsi_color = rsi > 70 ? color.red : rsi < 30 ? color.lime : color.yellow
    table.cell(ai_table, 1, 4, str.tostring(rsi, "#.#"), text_color=rsi_color)
    
    table.cell(ai_table, 0, 5, "MACD", text_color=color.white)
    macd_color = macd_line > signal_line ? color.lime : color.red
    table.cell(ai_table, 1, 5, str.tostring(macd_line, "#.##"), text_color=macd_color)
    
    table.cell(ai_table, 0, 6, "FVG", text_color=color.white)
    fvg_status = fvg_up ? "UP" : fvg_down ? "DOWN" : "NONE"
    fvg_color = fvg_up ? color.lime : fvg_down ? color.red : color.gray
    table.cell(ai_table, 1, 6, fvg_status, text_color=fvg_color)
    
    table.cell(ai_table, 0, 7, "AI Status", text_color=color.white)
    table.cell(ai_table, 1, 7, "ACTIVE", text_color=color.lime)