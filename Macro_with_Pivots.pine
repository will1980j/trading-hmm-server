//@version=6
indicator('WJ MACRO with Pivots', overlay = true, max_lines_count = 500, max_labels_count = 100, max_bars_back=5000)

// Set max_bars_back for important series
max_bars_back(time, 5000)
max_bars_back(close, 5000)
max_bars_back(open, 5000)

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
group_ln     = 'London Time Settings'
lnSummerTime = input.bool(true , 'London Daylight Saving Time (DST)', group = group_ln, tooltip = 'London : Daylight Saving Time (DST)\n - DST Start : Last Sunday in March at 1:00 UTC\n - DST End   : Last Sunday in October at 1:00 UTC')

// Time zone settings
group_tz = 'Time Zone Settings'
timezone_offset = input.int(1, 'Chart to NY Time Offset (hours)', minval=-12, maxval=12, group=group_tz, tooltip='Adjust if your macros appear at wrong times. Positive if your chart time is ahead of NY, negative if behind.')
show_debug = input.bool(true, 'Show Time Debug Info', group=group_tz)

// Pivot Settings
group_pivot = 'Pivot Settings'
showPivots = input.bool(true, 'Show Pivots in Macros', group=group_pivot)
showHighPivots = input.bool(true, "Show Buy Side Liquidity", group=group_pivot)
highColor = input.color(color.red, "Buy Side Liquidity Color", group=group_pivot)
highStyle = input.string("Dashed", title='Buy Side Style', options=["Solid", "Dotted", "Dashed"], group=group_pivot)
showLowPivots = input.bool(true, "Show Sell Side Liquidity", group=group_pivot)
lowColor = input.color(color.blue, "Sell Side Liquidity Color", group=group_pivot)
lowStyle = input.string("Dashed", title='Sell Side Style', options=["Solid", "Dotted", "Dashed"], group=group_pivot)
pivotLineWidth = input.int(1, "Pivot Line Width", minval=1, maxval=4, group=group_pivot)
pivotExtension = input.int(50, "Pivot Extension (bars)", minval=10, maxval=200, group=group_pivot)

group_m02 = 'London 02:33 AM 03:00 Macro'
m02330300 = input.bool(false, '02:33 AM 03:00', group = group_m02)
m02_top   = input.bool(true, 'Top Line', inline = 'mc02', group = group_m02)
m02_mid   = input.bool(true, 'Mid Line', inline = 'mc02', group = group_m02)
m02_bot   = input.bool(true, 'Bottom Line', inline = 'mc02', group = group_m02)
m02_ext   = input.bool(true, 'Extending Lines', inline = 'mc02', group = group_m02)

group_m04 = 'London 04:03 AM 04:30 Macro'
m04030430 = input.bool(false, '04:03 AM 04:30', group = group_m04)
m04_top   = input.bool(true, 'Top Line', inline = 'mc04', group = group_m04)
m04_mid   = input.bool(true, 'Mid Line', inline = 'mc04', group = group_m04)
m04_bot   = input.bool(true, 'Bottom Line', inline = 'mc04', group = group_m04)
m04_ext   = input.bool(true, 'Extending Lines', inline = 'mc04', group = group_m04)

group_ny     = 'New York Time Settings'
is_ny_dst() =>
    y = year(timenow)
    dst_start_month = 3
    dst_start_day = 1
    while dayofweek(timestamp(y, dst_start_month, dst_start_day)) != dayofweek.sunday or dst_start_day <= 7
        dst_start_day += 1
    dst_start_day += 7
    
    dst_end_month = 11
    dst_end_day = 1
    while dayofweek(timestamp(y, dst_end_month, dst_end_day)) != dayofweek.sunday
        dst_end_day += 1
    
    dst_start = timestamp(y, dst_start_month, dst_start_day)
    dst_end = timestamp(y, dst_end_month, dst_end_day)
    
    timenow >= dst_start and timenow < dst_end

nySummerTime = is_ny_dst()

group_m08 = 'New York 08:50 AM 09:10 Macro'
m08500910 = input.bool(false, '08:50 AM 09:10', group = group_m08)
m08_top   = input.bool(true, 'Top Line', inline = 'mc08', group = group_m08)
m08_mid   = input.bool(true, 'Mid Line', inline = 'mc08', group = group_m08)
m08_bot   = input.bool(true, 'Bottom Line', inline = 'mc08', group = group_m08)
m08_ext   = input.bool(true, 'Extending Lines', inline = 'mc08', group = group_m08)

group_m09 = 'New York 09:50 AM 10:10 Macro'
m09501010 = input.bool(true , '09:50 AM 10:10', group = group_m09)
m09_top   = input.bool(true, 'Top Line', inline = 'mc09', group = group_m09)
m09_mid   = input.bool(true, 'Mid Line', inline = 'mc09', group = group_m09)
m09_bot   = input.bool(true, 'Bottom Line', inline = 'mc09', group = group_m09)
m09_ext   = input.bool(true, 'Extending Lines', inline = 'mc09', group = group_m09)

group_m10 = 'New York 10:50 AM 11:10 Macro'
m10501110 = input.bool(true , '10:50 AM 11:10', group = group_m10)
m10_top   = input.bool(true, 'Top Line', inline = 'mc10', group = group_m10)
m10_mid   = input.bool(true, 'Mid Line', inline = 'mc10', group = group_m10)
m10_bot   = input.bool(true, 'Bottom Line', inline = 'mc10', group = group_m10)
m10_ext   = input.bool(true, 'Extending Lines', inline = 'mc10', group = group_m10)

group_m11 = 'New York 11:50 AM 12:10 Launch Macro'
m11501210 = input.bool(false, '11:50 AM 12:10', group = group_m11)
m11_top   = input.bool(true, 'Top Line', inline = 'mc11', group = group_m11)
m11_mid   = input.bool(true, 'Mid Line', inline = 'mc11', group = group_m11)
m11_bot   = input.bool(true, 'Bottom Line', inline = 'mc11', group = group_m11)
m11_ext   = input.bool(true, 'Extending Lines', inline = 'mc11', group = group_m11)

group_m13 = 'New York 13:10 PM 13:40 Macro'
m13101340 = input.bool(true , '13:10 PM 13:40', group = group_m13)
m13_top   = input.bool(true, 'Top Line', inline = 'mc13', group = group_m13)
m13_mid   = input.bool(true, 'Mid Line', inline = 'mc13', group = group_m13)
m13_bot   = input.bool(true, 'Bottom Line', inline = 'mc13', group = group_m13)
m13_ext   = input.bool(true, 'Extending Lines', inline = 'mc13', group = group_m13)

group_m15 = 'New York 15:15 PM 15:45 Macro'
m15151545 = input.bool(true , '15:15 PM 15:45', group = group_m15)
m15_top   = input.bool(true, 'Top Line', inline = 'mc15', group = group_m15)
m15_mid   = input.bool(true, 'Mid Line', inline = 'mc15', group = group_m15)
m15_bot   = input.bool(true, 'Bottom Line', inline = 'mc15', group = group_m15)
m15_ext   = input.bool(true, 'Extending Lines', inline = 'mc15', group = group_m15)

group_c   = 'Macro Classification'
pLen      = input.int(13, 'Length', minval = 5, maxval = 20, group = group_c)
pLoc      = input.string('Body', 'Swing Area', options = ['Wick', 'Body'], group = group_c)

aColor    = input.color(color.gray, 'Accumulation', group = group_c)
mColor    = input.color(color.red , 'Manipulation', group = group_c)
eColor    = input.color(color.blue, 'Expansion'   , group = group_c)

group_bg = 'Background & Line Colors'
enableCustomColors = input.bool(false, 'Enable Custom Colors', group = group_bg)
bgTransparency = input.int(90, 'Background Transparency', minval = 0, maxval = 100, group = group_bg)
topLineColor = input.color(color.green, 'Top Line Color', group = group_bg)
botLineColor = input.color(color.red, 'Bottom Line Color', group = group_bg)
midLineColor = input.color(color.yellow, 'Mid Line Color', group = group_bg)
bgColor = input.color(color.blue, 'Background Color', group = group_bg)

mcText    = input.string('Small', "Macro Texts", options=['Tiny', 'Small', 'Normal', 'None'])
showMacroType = input.bool(true, "Show Macro Type (A/M/E)", group = group_c)

mcSize = switch mcText
    'Tiny'   => size.tiny
    'Small'  => size.small
    'Normal' => size.normal
    => size.tiny

mcAlert    = input.bool(true, 'Alert Macro Times in Advance (Minutes)', inline = 'alert', tooltip = 'Enabling the option will plot a vertical line for the next macro time prior to the specified minutes\n\nNote: for alert configuration if not on 1 min chart please use round numbers')
mcAlertM   = input.int(30, '', minval = 5, maxval = 60, step = 5, inline = 'alert')

//-----------------------------------------------------------------------------}
//Main variables
//-----------------------------------------------------------------------------{
tf_m = timeframe.multiplier
bi   = bar_index

// Pivot helper functions
styleType(type) =>
    switch type
        "Solid" => line.style_solid
        "Dotted" => line.style_dotted
        "Dashed" => line.style_dashed

var highStyleType = styleType(highStyle)
var lowStyleType = styleType(lowStyle)

// Macro structure
type MacroData
    int id
    bool enabled
    bool show_top
    bool show_mid
    bool show_bot
    bool show_ext
    int hour
    int minute
    string label_text
    float top_price
    float bot_price
    float mid_price
    int start_time
    int end_bar
    line top_line
    line bot_line
    line mid_line
    linefill fill
    string type
    bool is_active
    bool top_broken
    bool bot_broken
    array<line> pivot_highs
    array<line> pivot_lows

// Create array of macro data
var MacroData[] macros = array.new<MacroData>()

// Initialize macros array
if barstate.isfirst
    array.push(macros, MacroData.new(0, m02330300, m02_top, m02_mid, m02_bot, m02_ext, 2, 33, '02:33 AM - 03:00', na, na, na, na, na, na, na, na, na, "accumulation", false, false, false, array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(1, m04030430, m04_top, m04_mid, m04_bot, m04_ext, 4, 3, '04:03 AM - 04:30', na, na, na, na, na, na, na, na, na, "accumulation", false, false, false, array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(2, m08500910, m08_top, m08_mid, m08_bot, m08_ext, 8, 50, '08:50 AM - 09:10', na, na, na, na, na, na, na, na, na, "accumulation", false, false, false, array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(3, m09501010, m09_top, m09_mid, m09_bot, m09_ext, 9, 50, '09:50 AM - 10:10', na, na, na, na, na, na, na, na, na, "accumulation", false, false, false, array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(4, m10501110, m10_top, m10_mid, m10_bot, m10_ext, 10, 50, '10:50 AM - 11:10', na, na, na, na, na, na, na, na, na, "accumulation", false, false, false, array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(5, m11501210, m11_top, m11_mid, m11_bot, m11_ext, 11, 50, '11:50 AM - 12:10', na, na, na, na, na, na, na, na, na, "accumulation", false, false, false, array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(6, m13101340, m13_top, m13_mid, m13_bot, m13_ext, 13, 10, '01:10 PM - 01:40', na, na, na, na, na, na, na, na, na, "accumulation", false, false, false, array.new<line>(), array.new<line>()))
    array.push(macros, MacroData.new(7, m15151545, m15_top, m15_mid, m15_bot, m15_ext, 15, 15, '03:15 PM - 03:45', na, na, na, na, na, na, na, na, na, "accumulation", false, false, false, array.new<line>(), array.new<line>()))

//-----------------------------------------------------------------------------}
// Function to check if current bar is at a specific hour and minute
//-----------------------------------------------------------------------------{
is_time(h, m) =>
    adjusted_hour = (h + timezone_offset) % 24
    hour == adjusted_hour and minute == m

// Check if any macro is currently active
is_macro_active() =>
    for i = 0 to array.size(macros) - 1
        macro = array.get(macros, i)
        if macro.is_active
            true
    false

//-----------------------------------------------------------------------------}
// Process macros if on supported timeframe
//-----------------------------------------------------------------------------{
if show_debug and barstate.islast
    current_hour = hour
    current_minute = minute
    
    bar_start_minute = 0
    bar_end_minute = 0
    
    if timeframe.period == "5"
        bar_start_minute := math.floor(current_minute / 5) * 5
        bar_end_minute := bar_start_minute + 4
    else if timeframe.period == "3"
        bar_start_minute := math.floor(current_minute / 3) * 3
        bar_end_minute := bar_start_minute + 2
    else
        bar_start_minute := current_minute
        bar_end_minute := current_minute
    
    var table debug_table = table.new(position.top_right, 3, 5)
    table.cell(debug_table, 0, 0, "Symbol:", text_color=color.white)
    table.cell(debug_table, 1, 0, syminfo.ticker, text_color=color.yellow)
    table.cell(debug_table, 0, 1, "Current Hour:", text_color=color.white)
    table.cell(debug_table, 1, 1, str.tostring(current_hour), text_color=color.yellow)
    table.cell(debug_table, 0, 2, "Current Minute:", text_color=color.white)
    table.cell(debug_table, 1, 2, str.tostring(current_minute), text_color=color.yellow)
    table.cell(debug_table, 0, 3, "Bar Minutes Range:", text_color=color.white)
    table.cell(debug_table, 1, 3, str.tostring(bar_start_minute) + "-" + str.tostring(bar_end_minute), text_color=color.yellow)
    table.cell(debug_table, 0, 4, "Timeframe:", text_color=color.white)
    table.cell(debug_table, 1, 4, timeframe.period, text_color=color.yellow)

if tf_m <= 5
    for i = 0 to array.size(macros) - 1
        macro = array.get(macros, i)
        
        // Start of macro period
        if macro.enabled and is_time(macro.hour, macro.minute)
            macro.top_price := high
            macro.bot_price := low
            macro.mid_price := math.avg(macro.top_price, macro.bot_price)
            macro.start_time := time
            macro.is_active := true
            
            if timeframe.period == "1"
                macro.end_bar := bar_index + 20
            else if timeframe.period == "3"
                macro.end_bar := bar_index + 7
            else if timeframe.period == "5"
                macro.end_bar := bar_index + 4
            else
                macro.end_bar := bar_index + 4
            
            macro.type := "accumulation"
            if math.abs(close - open) > math.abs(close[1] - open[1]) * 1.5
                macro.type := "manipulation"
            if high - low > (high[1] - low[1]) * 1.3
                macro.type := "expansion"
            
            color line_color = macro.type == "manipulation" ? mColor : (macro.type == "expansion" ? eColor : aColor)
            
            if macro.show_top
                macro.top_line := line.new(bar_index, macro.top_price, bar_index + 1, macro.top_price, 
                                         color=enableCustomColors ? topLineColor : line_color, width=2)
            if macro.show_bot
                macro.bot_line := line.new(bar_index, macro.bot_price, bar_index + 1, macro.bot_price, 
                                         color=enableCustomColors ? botLineColor : line_color, width=2)
            if macro.show_mid
                macro.mid_line := line.new(bar_index, macro.mid_price, bar_index + 1, macro.mid_price, 
                                         color=enableCustomColors ? midLineColor : line_color, style=line.style_dotted)
            
            if mcText != 'None'
                string labelText = "MACRO\n" + macro.label_text
                if showMacroType
                    labelText := labelText + "\n" + str.upper(str.substring(macro.type, 0, 1))
                label.new(bar_index, macro.top_price, labelText, style=label.style_label_down, 
                         color=color.new(color.black, 80), textcolor=color.white, size=mcSize)
            
            if macro.show_top and macro.show_bot
                macro.fill := linefill.new(macro.top_line, macro.bot_line, 
                                         color.new(enableCustomColors ? bgColor : line_color, bgTransparency))
            
        
        // During macro period
        else if macro.is_active and bar_index <= macro.end_bar
            if math.abs(close - open) > math.abs(close[1] - open[1]) * 1.5
                macro.type := "manipulation"
            if high - low > (high[1] - low[1]) * 1.3
                macro.type := "expansion"
            
            if high > macro.top_price and not na(macro.top_line) and macro.show_top
                macro.top_price := high
                macro.top_line.set_y1(macro.top_price)
                macro.top_line.set_y2(macro.top_price)
            
            if low < macro.bot_price and not na(macro.bot_line) and macro.show_bot
                macro.bot_price := low
                macro.bot_line.set_y1(macro.bot_price)
                macro.bot_line.set_y2(macro.bot_price)
            
            if not na(macro.mid_line) and macro.show_mid
                macro.mid_price := math.avg(macro.top_price, macro.bot_price)
                macro.mid_line.set_y1(macro.mid_price)
                macro.mid_line.set_y2(macro.mid_price)
            
            // Pivot detection within macro
            if showPivots
                pivotHigh = ta.pivothigh(high, 1, 1)
                pivotLow = ta.pivotlow(low, 1, 1)
                
                if not na(pivotHigh) and showHighPivots
                    pivotLine = line.new(bar_index - 1, pivotHigh, bar_index, pivotHigh, 
                                       color=highColor, width=pivotLineWidth, style=highStyleType)
                    label.new(bar_index - 1, pivotHigh + (10 * syminfo.mintick), "Buy Side Liquidity", 
                             color=color.new(color.black, 100), textcolor=color.white, style=label.style_label_left)
                    array.push(macro.pivot_highs, pivotLine)
                
                if not na(pivotLow) and showLowPivots
                    pivotLine = line.new(bar_index - 1, pivotLow, bar_index, pivotLow, 
                                       color=lowColor, width=pivotLineWidth, style=lowStyleType)
                    label.new(bar_index - 1, pivotLow - (15 * syminfo.mintick), "Sell Side Liquidity", 
                             color=color.new(color.black, 100), textcolor=color.white, style=label.style_label_left)
                    array.push(macro.pivot_lows, pivotLine)
        
        // End of macro period
        else if bar_index > macro.end_bar and macro.is_active
            macro.is_active := false

    // Extend and check for line breaks
    for i = 0 to array.size(macros) - 1
        macro = array.get(macros, i)
        
        // Extend macro lines if not broken
        if not na(macro.top_line) and not macro.top_broken
            macro.top_line.set_x2(bar_index + 1)
            if high >= macro.top_line.get_y1()
                macro.top_broken := true
        
        if not na(macro.bot_line) and not macro.bot_broken
            macro.bot_line.set_x2(bar_index + 1)
            if low <= macro.bot_line.get_y1()
                macro.bot_broken := true
        
        if not na(macro.mid_line)
            macro.mid_line.set_x2(bar_index + 1)
        
        // Extend and check pivot lines
        if array.size(macro.pivot_highs) > 0
            for j = array.size(macro.pivot_highs) - 1 to 0
                pivotLine = array.get(macro.pivot_highs, j)
                if not na(pivotLine)
                    if high >= pivotLine.get_y1()
                        array.remove(macro.pivot_highs, j)
                    else
                        pivotLine.set_x2(bar_index + 1)
        
        if array.size(macro.pivot_lows) > 0
            for j = array.size(macro.pivot_lows) - 1 to 0
                pivotLine = array.get(macro.pivot_lows, j)
                if not na(pivotLine)
                    if low <= pivotLine.get_y1()
                        array.remove(macro.pivot_lows, j)
                    else
                        pivotLine.set_x2(bar_index + 1)
else
    if barstate.islast
        var table tf_note = table.new(position.bottom_right, 1, 1)
        table.cell(tf_note, 0, 0, 'ICT Macros are supported on:\n 1 min, 3 mins and 5 mins charts\n\nCurrent timeframe: ' + timeframe.period, text_size=size.small, text_color=chart.fg_color)
//-----------------------------------------------------------------------------}